import { createClient } from '@supabase/supabase-js';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
import { TIMER_DURATION_SECONDS } from '../constants/time';

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º–∞—Ç Next.js
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

console.log('Initializing Supabase client with URL:', supabaseUrl);

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true
  },
  global: {
    fetch: fetch.bind(globalThis)
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
(async () => {
  if (typeof window !== 'undefined') {
    try {
      const { data, error } = await supabase.from('admin_users').select('count').limit(1);
      if (error) {
        console.error('Supabase initialization error:', error);
      } else {
        console.log('Supabase initialized successfully');
      }
    } catch (err) {
      console.error('Error during Supabase initialization:', err);
    }
  }
})();

export interface Employee {
  id: string;
  first_name: string;
  department?: string;
  level?: string;
  success?: number;
  improvement?: string;
  trend?: string;
  status?: string;
  created_at?: string;
}

export interface CandidateToken {
  id: string;
  employee_id: string;
  token: string;
  created_at: string;
  expires_at: string;
  is_used: boolean;
}

export interface ChatMessage {
  content: string;
  time: string;
  isOwn: boolean;
  isRead?: boolean;
}

export interface Chat {
  id: string;
  test_session_id: string;
  chat_number: 1 | 2 | 3 | 4;
  messages: ChatMessage[];
  created_at: string;
  updated_at: string;
}

export interface TestSession {
  id: string;
  employee_id: string;
  start_time: string;
  end_time?: string;
  completed: boolean;
  created_at: string;
  updated_at: string;
  employee?: {
    first_name: string;
  };
  chats?: Chat[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
export interface DialogAnalysisResult {
  dialog_analysis: {
    metrics: {
      engagement: {
        score: number;
        verdict: string;
      };
      charm_and_tone: {
        score: number;
        verdict: string;
      };
      creativity: {
        score: number;
        verdict: string;
      };
      adaptability: {
        score: number;
        verdict: string;
      };
      self_promotion: {
        score: number;
        verdict: string;
      };
      pricing_policy: {
        score: number;
        verdict: string;
        strengths?: string[];
        improvements?: string[];
      };
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ —Ç—Ä–µ–º —ç—Ç–∞–ø–∞–º –ø—Ä–æ–¥–∞–∂
      sales_stages?: {
        introduction: {
          score: number;
          strengths: string[];
          weaknesses: string[];
        };
        warmup: {
          score: number;
          strengths: string[];
          weaknesses: string[];
        };
        closing: {
          score: number;
          strengths: string[];
          weaknesses: string[];
        };
      };
    };
    overall_conclusion: string;
    result_summary?: string;
  };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export interface TestResult {
  id?: string;
  test_session_id: string;
  employee_id: string;
  raw_prompt?: string;
  analysis_result?: DialogAnalysisResult;
  engagement_score?: number;
  charm_tone_score?: number;
  creativity_score?: number;
  adaptability_score?: number;
  self_promotion_score?: number;
  pricing_policy_score?: number;
  overall_score?: number;
  created_at?: string;
  updated_at?: string;
}

export interface CandidateFormInput {
  employee_id: string;
  first_name: string;
  telegram_tag: string;
  shift: string;
  experience: string;
  motivation: string;
  about_me: string;
}

export interface CandidateForm {
  id?: string;
  employee_id?: string;
  telegram_tag: string;
  shift: string;
  experience: string;
  motivation: string;
  about_me: string;
  created_at?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
export interface CandidateFormData {
  id: string;
  telegram_tag: string;
  shift: string;
  experience: string;
  motivation: string;
  about_me: string;
  created_at: string;
  employee_id: string;
}

export interface User {
  id: string;
  first_name: string;
  email: string;
  phone: string;
  created_at?: string;
}

// Employee functions
export async function createEmployee(employeeData: {
  first_name: string;
  department?: string;
  level?: string;
  success?: number;
  improvement?: string;
  trend?: string;
  status?: string;
}): Promise<Employee> {
  try {
    const { data, error } = await supabase
      .from('employees')
      .insert([
        {
          first_name: employeeData.first_name,
          department: employeeData.department || 'Candidates',
          level: employeeData.level || 'Candidate',
          success: employeeData.success !== undefined ? employeeData.success : 0,
          improvement: employeeData.improvement || '0%',
          trend: employeeData.trend || 'up',
          status: employeeData.status || '–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
        },
      ])
      .select();

    if (error) {
      console.error('Error creating employee:', error);
      throw new Error('Failed to create employee');
    }

    if (!data || data.length === 0) {
      throw new Error('No data returned from the database');
    }

    return data[0];
  } catch (error) {
    console.error('Error in createEmployee:', error);
    throw error;
  }
}

export async function getEmployees() {
  try {
    console.log('Supabase: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    const { data, error } = await supabase
      .from('employees')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error);
      throw new Error(`Error fetching employees: ${error.message}`);
    }

    console.log('Supabase: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', data?.length || 0);
    return data || [];
  } catch (error) {
    console.error('Supabase: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ getEmployees:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return [];
  }
}

export async function getEmployee(id: string): Promise<Employee> {
  const { data, error } = await supabase
    .from('employees')
    .select('*')
    .eq('id', id)
    .single();

  if (error) {
    console.error('Error fetching employee:', error);
    throw new Error(`Error fetching employee: ${error.message}`);
  }

  if (!data) {
    throw new Error('Employee not found');
  }

  return data;
}

export async function updateEmployee(
  id: string,
  employeeData: {
    first_name?: string;
    department?: string;
    level?: string;
    success?: number;
    improvement?: string;
    trend?: string;
    status?: string;
  }
): Promise<Employee> {
  try {
    const { data, error } = await supabase
      .from('employees')
      .update(employeeData)
      .eq('id', id)
      .select();

    if (error) {
      console.error('Error updating employee:', error);
      throw new Error('Failed to update employee');
    }

    if (!data || data.length === 0) {
      throw new Error('No data returned from the database');
    }

    return data[0];
  } catch (error) {
    console.error('Error in updateEmployee:', error);
    throw error;
  }
}

export async function deleteEmployee(id: string) {
  const { error } = await supabase
    .from('employees')
    .delete()
    .eq('id', id);

  if (error) {
    console.error('Error deleting employee:', error);
    throw new Error(`Error deleting employee: ${error.message}`);
  }
}

// Test session functions
export async function createTestSession(
  employeeId: string
): Promise<TestSession> {
  try {
    console.log('üîÑ Creating test session:', { employeeId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const { data: existingSessions, error: checkError } = await supabase
      .from('test_sessions')
      .select('*')
      .eq('employee_id', employeeId)
      .eq('completed', false)
      .order('created_at', { ascending: false })
      .limit(1);
    
    if (checkError) {
      console.error('‚ùå Error checking existing sessions:', checkError);
    } else if (existingSessions && existingSessions.length > 0) {
      console.log('üîç Found existing active session for employee:', existingSessions[0]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —á–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      const { data: existingChats, error: chatError } = await supabase
        .from('chats')
        .select('*')
        .eq('test_session_id', existingSessions[0].id)
        .order('chat_number');
      
      if (!chatError && existingChats && existingChats.length === 4) {
        console.log('‚úÖ Using existing session with all 4 chats:', 
          existingChats.map(c => ({ id: c.id, chatNumber: c.chat_number })));
        
        // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
        try {
          const { data: tokenData } = await supabase
            .from('candidate_tokens')
            .select('token')
            .eq('employee_id', employeeId)
            .eq('is_used', false)
            .order('created_at', { ascending: false })
            .limit(1);
            
          if (tokenData && tokenData.length > 0) {
            await markTokenAsUsed(tokenData[0].token);
          }
        } catch (tokenError) {
          console.warn('‚ö†Ô∏è Error marking token as used:', tokenError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å —Ç–æ–∫–µ–Ω–æ–º
        }
        
        return {
          ...existingSessions[0],
          chats: existingChats
        };
      } else if (!chatError && existingChats && existingChats.length > 0) {
        console.warn('‚ö†Ô∏è Found session with incomplete chats:', existingChats.length);
        console.log('‚ûï Creating missing chats...');
        
        // –ù–∞—Ö–æ–¥–∏–º, –∫–∞–∫–∏—Ö —á–∞—Ç–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        const existingChatNumbers = existingChats.map(c => c.chat_number);
        const missingChatNumbers = [1, 2, 3, 4].filter(num => !existingChatNumbers.includes(num));
        
        if (missingChatNumbers.length > 0) {
          console.log('üîç Missing chat numbers:', missingChatNumbers);
          
          // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞—Ç—ã
          const additionalChatResults = await Promise.all(missingChatNumbers.map(chatNumber => 
            supabase
              .from('chats')
              .insert([{
                test_session_id: existingSessions[0].id,
                chat_number: chatNumber,
                messages: []
              }])
              .select()
              .single()
          ));
          
          const allChats = [...existingChats];
          let additionalChatsCreated = true;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
          for (let i = 0; i < additionalChatResults.length; i++) {
            const { data, error } = additionalChatResults[i];
            if (error) {
              console.error(`‚ùå Error creating missing chat ${missingChatNumbers[i]}:`, error);
              additionalChatsCreated = false;
            } else {
              console.log(`‚úÖ Missing chat ${missingChatNumbers[i]} created successfully`);
              allChats.push(data);
            }
          }
          
          if (additionalChatsCreated) {
            console.log('‚úÖ All missing chats created, using existing session with complete chats');
            
            // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
            try {
              const { data: tokenData } = await supabase
                .from('candidate_tokens')
                .select('token')
                .eq('employee_id', employeeId)
                .eq('is_used', false)
                .order('created_at', { ascending: false })
                .limit(1);
                
              if (tokenData && tokenData.length > 0) {
                await markTokenAsUsed(tokenData[0].token);
              }
            } catch (tokenError) {
              console.warn('‚ö†Ô∏è Error marking token as used:', tokenError);
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å —Ç–æ–∫–µ–Ω–æ–º
            }
            
            return {
              ...existingSessions[0],
              chats: allChats
            };
          }
        }
      }
      
      console.log('‚ö†Ô∏è Existing session has incomplete chats, proceeding to create new session');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const { data: session, error: sessionError } = await supabase
      .from('test_sessions')
      .insert([{
        employee_id: employeeId,
        start_time: new Date().toISOString(),
        completed: false
      }])
      .select()
      .single();

    if (sessionError || !session) {
      console.error('‚ùå Failed to create test session:', sessionError);
      throw sessionError || new Error('No data returned from test session creation');
    }

    console.log('‚úÖ Test session created:', { 
      id: session.id, 
      employeeId: session.employee_id 
    });

    // –°–æ–∑–¥–∞–µ–º 4 –ø—É—Å—Ç—ã—Ö —á–∞—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
    console.log('üîÑ Creating 4 chats for session:', session.id);
    
    const chatResults = await Promise.all([1, 2, 3, 4].map(chatNumber => 
      supabase
        .from('chats')
        .insert([{
          test_session_id: session.id,
          chat_number: chatNumber,
          messages: []
        }])
        .select()
        .single()
    ));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
    const chatErrors = [];
    const createdChats = [];
    
    for (let i = 0; i < chatResults.length; i++) {
      const { data, error } = chatResults[i];
      if (error) {
        console.error(`‚ùå Error creating chat ${i+1}:`, error);
        chatErrors.push({ chatNumber: i+1, error: error.message });
      } else {
        console.log(`‚úÖ Chat ${i+1} created successfully:`, { 
          id: data.id, 
          test_session_id: data.test_session_id,
          chat_number: data.chat_number
        });
        createdChats.push(data);
      }
    }
    
    if (chatErrors.length > 0) {
      console.error('‚ùå Failed to create all chats:', chatErrors);
      
      // –ï—Å–ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —á–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–∏–º–∏
      if (createdChats.length > 0) {
        console.warn(`‚ö†Ô∏è Continuing with ${createdChats.length} created chats instead of 4`);
      } else {
        throw new Error('Failed to create any chats for test session');
      }
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const { data: chats, error: chatsError } = await supabase
      .from('chats')
      .select('*')
      .eq('test_session_id', session.id)
      .order('chat_number');

    if (chatsError) {
      console.error('‚ùå Error fetching created chats:', chatsError);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏
      if (createdChats.length > 0) {
        console.warn('‚ö†Ô∏è Using directly created chats instead of fetched ones');
        
        // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
        try {
          const { data: tokenData } = await supabase
            .from('candidate_tokens')
            .select('token')
            .eq('employee_id', employeeId)
            .eq('is_used', false)
            .order('created_at', { ascending: false })
            .limit(1);
            
          if (tokenData && tokenData.length > 0) {
            await markTokenAsUsed(tokenData[0].token);
          }
        } catch (tokenError) {
          console.warn('‚ö†Ô∏è Error marking token as used:', tokenError);
        }
        
        return {
          ...session,
          chats: createdChats
        };
      }
      throw new Error('Failed to fetch created chats');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ 4 —á–∞—Ç–∞
    if (!chats || chats.length < 4) {
      console.warn(`‚ö†Ô∏è Only ${chats?.length || 0} chats found instead of 4, attempting repair`);
      
      // –ù–∞—Ö–æ–¥–∏–º, –∫–∞–∫–∏—Ö —á–∞—Ç–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
      const existingChatNumbers = chats?.map(c => c.chat_number) || [];
      const missingChatNumbers = [1, 2, 3, 4].filter(num => !existingChatNumbers.includes(num));
      
      // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞—Ç—ã
      if (missingChatNumbers.length > 0) {
        console.log('‚ûï Creating missing chat numbers:', missingChatNumbers);
        
        const repairResults = await Promise.all(missingChatNumbers.map(chatNumber => 
          supabase
            .from('chats')
            .insert([{
              test_session_id: session.id,
              chat_number: chatNumber,
              messages: []
            }])
            .select()
            .single()
        ));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        const repairedChats = [...(chats || [])];
        for (const { data, error } of repairResults) {
          if (!error && data) {
            repairedChats.push(data);
            console.log(`‚úÖ Successfully repaired missing chat ${data.chat_number}`);
          }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
        if (repairedChats.length > (chats?.length || 0)) {
          console.log('‚úÖ Chat repair successful, now have', repairedChats.length, 'chats');
          
          // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
          try {
            const { data: tokenData } = await supabase
              .from('candidate_tokens')
              .select('token')
              .eq('employee_id', employeeId)
              .eq('is_used', false)
              .order('created_at', { ascending: false })
              .limit(1);
              
            if (tokenData && tokenData.length > 0) {
              await markTokenAsUsed(tokenData[0].token);
            }
          } catch (tokenError) {
            console.warn('‚ö†Ô∏è Error marking token as used:', tokenError);
          }
          
          return {
            ...session,
            chats: repairedChats
          };
        }
      }
    }

    console.log('‚úÖ All chats created and fetched successfully:', {
      sessionId: session.id,
      employeeId: session.employee_id,
      chatCount: chats ? chats.length : 0,
      chatNumbers: chats ? chats.map(c => c.chat_number) : []
    });
    
    // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
    try {
      const { data: tokenData } = await supabase
        .from('candidate_tokens')
        .select('token')
        .eq('employee_id', employeeId)
        .eq('is_used', false)
        .order('created_at', { ascending: false })
        .limit(1);
        
      if (tokenData && tokenData.length > 0) {
        await markTokenAsUsed(tokenData[0].token);
      }
    } catch (tokenError) {
      console.warn('‚ö†Ô∏è Error marking token as used:', tokenError);
    }
    
    return {
      ...session,
      chats: chats || []
    };
  } catch (error) {
    console.error('‚ùå Error in createTestSession:', error);
    throw error;
  }
}

export async function updateTestSession(
  sessionId: string, 
  updates: Partial<TestSession>
): Promise<TestSession> {
  try {
    console.log('Updating test session:', { sessionId, updates });
    
    const { data, error } = await supabase
      .from('test_sessions')
      .update({
        ...updates,
        updated_at: new Date().toISOString()
      })
      .eq('id', sessionId)
      .select()
      .single();

    if (error) {
      console.error('Error updating test session:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Error in updateTestSession:', error);
    throw error;
  }
}

export async function completeTestSession(
  sessionId: string
): Promise<TestSession> {
  try {
    console.log('üîÑ Completing test session:', { sessionId });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    const { data: existingSession, error: checkError } = await supabase
      .from('test_sessions')
      .select('*')
      .eq('id', sessionId)
      .single();
      
    if (checkError) {
      console.error('‚ùå Error checking session existence:', checkError);
      throw new Error(`Failed to find session: ${checkError.message}`);
    }
    
    if (!existingSession) {
      console.error('‚ùå Session not found:', sessionId);
      throw new Error('Session not found');
    }
    
    console.log('‚úì Found session to complete:', { 
      id: existingSession.id, 
      completed: existingSession.completed,
      employee_id: existingSession.employee_id
    });
    
    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    if (existingSession.completed) {
      console.log('‚ÑπÔ∏è Session already completed:', existingSession);
      return existingSession;
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    try {
      const { data: chats, error: chatError } = await supabase
        .from('chats')
        .select('*')
        .eq('test_session_id', sessionId);
        
      if (!chatError && chats && chats.length > 0) {
        console.log(`–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ${chats.length} —á–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if (typeof sessionStorage !== 'undefined') {
          sessionStorage.setItem(`chat_history_${sessionId}`, JSON.stringify({
            timestamp: new Date().toISOString(),
            chats: chats
          }));
        }
      }
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–æ–≤:', cacheError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    const { data, error } = await supabase
      .from('test_sessions')
      .update({
        end_time: new Date().toISOString(),
        completed: true,
        updated_at: new Date().toISOString()
      })
      .eq('id', sessionId)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error completing test session:', error);
      throw error;
    }

    if (!data) {
      console.error('‚ùå No data returned from test session completion');
      throw new Error('No data returned from test session completion');
    }

    console.log('‚úÖ Test session completed successfully:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ localStorage (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    const isLocalStorageAvailable = typeof window !== 'undefined' && window.localStorage;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤ localStorage –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if (isLocalStorageAvailable) {
      try {
        const cacheKey = `test_session_${sessionId}`;
        localStorage.setItem(cacheKey, JSON.stringify({
          ...data,
          cached_at: new Date().toISOString()
        }));
        console.log('‚úÖ Session cache updated in localStorage');
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Failed to update local cache:', cacheError);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ
      }
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå Error in completeTestSession:', error);
    throw error;
  }
}

export async function getRecentTestSessions(limit: number = 20): Promise<TestSession[]> {
  try {
    console.log('Supabase: –ó–∞–ø—Ä–æ—Å –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π, –ª–∏–º–∏—Ç:', limit);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ localStorage (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    const isLocalStorageAvailable = typeof window !== 'undefined' && window.localStorage;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫—ç—à –≤ localStorage, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if (isLocalStorageAvailable) {
      try {
        const cacheKey = 'recent_test_sessions';
        const cachedData = localStorage.getItem(cacheKey);
        
        if (cachedData) {
          const { sessions, timestamp } = JSON.parse(cachedData);
          const cacheAge = Date.now() - new Date(timestamp).getTime();
          
          // –ï—Å–ª–∏ –∫—ç—à –Ω–µ —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥ (5000 –º—Å), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (cacheAge < 5000 && Array.isArray(sessions) && sessions.length > 0) {
            console.log('Supabase: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏, –≤–æ–∑—Ä–∞—Å—Ç:', Math.round(cacheAge / 1000), '—Å–µ–∫—É–Ω–¥');
            return sessions;
          }
        }
      } catch (cacheError) {
        console.warn('Supabase: –û—à–∏–±–∫–∞ –∫—ç—à–∞:', cacheError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
      }
    }
    
    const { data, error } = await supabase
      .from('test_sessions')
      .select(`
        *,
        employee:employees (
          first_name
        ),
        chats (
          id,
          chat_number,
          messages
        )
      `)
      .order('created_at', { ascending: false })
      .limit(limit);

    if (error) {
      console.error('Supabase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π:', error);
      // –í–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!data || data.length === 0) {
      console.warn('Supabase: –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return [];
    }

    console.log('Supabase: –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π:', data.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const validSessions = data.filter(session => {
      if (!session.id || !session.employee_id) {
        console.warn('‚ö†Ô∏è Invalid session data:', session);
        return false;
      }
      return true;
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ employee_id - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
    const latestSessionByEmployee: { [key: string]: TestSession } = {};
    
    validSessions.forEach(session => {
      const employeeId = session.employee_id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ completed
      // –ï—Å–ª–∏ –µ—Å—Ç—å end_time, –Ω–æ completed = false, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —ç—Ç–æ
      if (session.end_time && !session.completed) {
        console.warn('‚ö†Ô∏è Session has end_time but completed=false, fixing:', session.id);
        session.completed = true;
      }
      
      // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –±–µ—Ä–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—É—é
      if (latestSessionByEmployee[employeeId]) {
        const existingDate = new Date(latestSessionByEmployee[employeeId].created_at).getTime();
        const currentDate = new Date(session.created_at).getTime();
        
        if (currentDate > existingDate) {
          latestSessionByEmployee[employeeId] = session;
        }
      } else {
        latestSessionByEmployee[employeeId] = session;
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    const uniqueSessions = Object.values(latestSessionByEmployee)
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
    
    console.log('Supabase: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–µ—Å—Å–∏–π:', uniqueSessions.length);
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ localStorage, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    if (isLocalStorageAvailable) {
      try {
        const cacheKey = 'recent_test_sessions';
        localStorage.setItem(cacheKey, JSON.stringify({
          sessions: uniqueSessions,
          timestamp: new Date().toISOString()
        }));
        console.log('Supabase: –°–µ—Å—Å–∏–∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≤ localStorage');
      } catch (cacheError) {
        console.warn('Supabase: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏:', cacheError);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }
    
    return uniqueSessions;
  } catch (error) {
    console.error('Supabase: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ getRecentTestSessions:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return [];
  }
}

export async function getEmployeeTestSessions(employeeId: string): Promise<TestSession[]> {
  if (!employeeId) {
    console.error('[getEmployeeTestSessions] –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
    return [];
  }
  
  console.log('[getEmployeeTestSessions] –ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', employeeId);
  
  try {
    const { data, error } = await supabase
      .from('test_sessions')
      .select('*, employee:employees(*)')
      .eq('employee_id', employeeId)
      .order('created_at', { ascending: false });
      
    if (error) {
      console.error('[getEmployeeTestSessions] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π:', error);
      throw error;
    }
    
    if (!data || data.length === 0) {
      console.log('[getEmployeeTestSessions] –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', employeeId);
      return [];
    }
    
    console.log('[getEmployeeTestSessions] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ—Å—Å–∏–π:', data.length);
    
    return data;
  } catch (error) {
    console.error('[getEmployeeTestSessions] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

export async function addMessageToTestSession(
  sessionId: string,
  chatNumber: 1 | 2 | 3 | 4,
  message: ChatMessage
): Promise<Chat> {
  try {
    console.log('Adding message to session:', { sessionId, chatNumber, message });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    try {
      const sessionData = await getTestSession(sessionId);
      if (sessionData) {
        console.log('Found session for message:', { 
          sessionId, 
          employeeId: sessionData.employee_id,
          completed: sessionData.completed
        });
      } else {
        console.warn('Session not found, but will continue with adding message');
      }
    } catch (sessionError) {
      console.error('Session validation error:', sessionError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ single()
    const { data: chat, error: fetchError } = await supabase
      .from('chats')
      .select('*')
      .eq('test_session_id', sessionId)
      .eq('chat_number', chatNumber)
      .single();

    if (fetchError) {
      console.error('Error fetching chat:', fetchError);
      throw new Error(`Failed to fetch chat: ${fetchError.message}`);
    }

    if (!chat) {
      console.error('Chat not found for session:', sessionId, 'and number:', chatNumber);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏
      const { data: existingChats, error: chatsError } = await supabase
        .from('chats')
        .select('id, chat_number')
        .eq('test_session_id', sessionId);
        
      if (chatsError) {
        console.error('Error checking existing chats:', chatsError);
      } else {
        console.log('Existing chats for session:', existingChats);
      }
      
      throw new Error('Chat not found');
    }

    console.log('Found chat:', { chatId: chat.id, existingMessages: chat.messages?.length || 0 });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSONB
    const existingMessages = chat.messages || [];
    const updatedMessages = [...existingMessages, message];
    
    // –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É
    // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –∑–∞—â–∏—Ç—É –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (typeof sessionStorage !== 'undefined') {
      try {
        // –ö—ç—à–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const cacheKey = `chat_${sessionId}_${chatNumber}`;
        sessionStorage.setItem(cacheKey, JSON.stringify({
          timestamp: new Date().toISOString(),
          messages: updatedMessages,
          id: chat.id,
          test_session_id: sessionId,
          chat_number: chatNumber
        }));
        console.log('Cached updated messages to sessionStorage');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
        const historyKey = `chat_history_${sessionId}`;
        let existingHistory = null;
        
        try {
          const rawHistory = sessionStorage.getItem(historyKey);
          if (rawHistory) {
            existingHistory = JSON.parse(rawHistory);
          }
        } catch (e) {
          console.warn('Error parsing existing history cache:', e);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö
        if (existingHistory && Array.isArray(existingHistory.chats)) {
          const updatedChats = [...existingHistory.chats];
          const chatIndex = updatedChats.findIndex(c => 
            c.test_session_id === sessionId && c.chat_number === chatNumber
          );
          
          if (chatIndex >= 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
            updatedChats[chatIndex] = {
              ...updatedChats[chatIndex],
              messages: updatedMessages,
              updated_at: new Date().toISOString()
            };
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            updatedChats.push({
              id: chat.id,
              test_session_id: sessionId,
              chat_number: chatNumber,
              messages: updatedMessages,
              created_at: chat.created_at,
              updated_at: new Date().toISOString()
            });
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
          sessionStorage.setItem(historyKey, JSON.stringify({
            timestamp: new Date().toISOString(),
            chats: updatedChats
          }));
          console.log('Updated chat history cache');
        }
      } catch (cacheError) {
        console.warn('Error caching messages:', cacheError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    const { data: updatedChat, error: updateError } = await supabase
      .from('chats')
      .update({
        messages: updatedMessages,
        updated_at: new Date().toISOString()
      })
      .eq('id', chat.id)
      .select()
      .single();

    if (updateError) {
      console.error('Error updating chat:', updateError);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
      // –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã UI –Ω–µ —Ç–µ—Ä—è–ª –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const fallbackChat = {
        ...chat,
        messages: updatedMessages,
        updated_at: new Date().toISOString()
      };
      
      console.log('Returning fallback chat with local changes');
      return fallbackChat;
    }

    if (!updatedChat) {
      console.error('No data returned after updating chat');
      
      // –¢–∞–∫ –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      const fallbackChat = {
        ...chat,
        messages: updatedMessages,
        updated_at: new Date().toISOString()
      };
      
      console.log('Returning fallback chat with local changes due to empty response');
      return fallbackChat;
    }

    console.log('Message added successfully:', { 
      chatId: updatedChat.id, 
      messageCount: updatedChat.messages.length,
      latestMessage: updatedChat.messages[updatedChat.messages.length - 1]
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    try {
      getChatHistory(sessionId).catch(e => console.warn('Error updating chat history cache:', e));
    } catch (e) {
      console.warn('Error triggering history update:', e);
    }
    
    return updatedChat;
  } catch (error) {
    console.error('Error in addMessageToTestSession:', error);
    throw error;
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
export async function getTestSessionChats(sessionId: string): Promise<Chat[]> {
  try {
    const { data, error } = await supabase
      .from('chats')
      .select('*')
      .eq('test_session_id', sessionId)
      .order('chat_number');

    if (error) {
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('Error in getTestSessionChats:', error);
    throw error;
  }
}

export async function getChatHistory(sessionId: string): Promise<Chat[]> {
  try {
    console.log('Fetching chat history for session:', sessionId);
    
    if (!sessionId) {
      console.error('Empty sessionId provided to getChatHistory');
      return [];
    }
    
    const { data, error } = await supabase
      .from('chats')
      .select('*')
      .eq('test_session_id', sessionId)
      .order('chat_number', { ascending: true });
      
    if (error) {
      console.error('Error fetching chat history:', error);
      throw error;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!data || data.length === 0 || data.some(chat => !chat.messages || chat.messages.length === 0)) {
      console.warn('–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –∏–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Ç—ã –ø—É—Å—Ç—ã, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ sessionStorage - –æ–±—â–∏–π –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏
      if (typeof sessionStorage !== 'undefined') {
        const cachedData = sessionStorage.getItem(`chat_history_${sessionId}`);
        if (cachedData) {
          try {
            const parsed = JSON.parse(cachedData);
            if (parsed && parsed.chats && Array.isArray(parsed.chats) && parsed.chats.length > 0) {
              console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${parsed.chats.length} —á–∞—Ç–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ –∫—ç—à–∞ sessionStorage`);
              
              // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Ç—ã –ø—É—Å—Ç—ã, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
              if (data && data.length > 0) {
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —á–∞—Ç–æ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                const cachedChatsMap = new Map();
                parsed.chats.forEach((chat: any) => {
                  if (chat.chat_number) {
                    cachedChatsMap.set(chat.chat_number, chat);
                  }
                });
                
                // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –ë–î –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫—ç—à–∞
                const mergedChats = data.map(dbChat => {
                  if (!dbChat.messages || dbChat.messages.length === 0) {
                    const cachedChat = cachedChatsMap.get(dbChat.chat_number);
                    if (cachedChat && cachedChat.messages && cachedChat.messages.length > 0) {
                      console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ #${dbChat.chat_number} –∏–∑ –∫—ç—à–∞`);
                      return { ...dbChat, messages: cachedChat.messages };
                    }
                  }
                  return dbChat;
                });
                
                return mergedChats;
              }
              
              return parsed.chats as Chat[];
            }
          } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—â–µ–≥–æ –∫—ç—à–∞:', e);
          }
        }
        
        // –ï—Å–ª–∏ –æ–±—â–∏–π –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—ç—à–µ–π —á–∞—Ç–æ–≤
        try {
          const restoredChats: Chat[] = [];
          let hasRestoredAny = false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —á–∞—Ç–∞ (1-4)
          for (let chatNum = 1; chatNum <= 4; chatNum++) {
            // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
            const chatNumber = chatNum as 1 | 2 | 3 | 4;
            const chatCacheKey = `chat_${sessionId}_${chatNumber}`;
            const chatData = sessionStorage.getItem(chatCacheKey);
            
            if (chatData) {
              try {
                const parsedChat = JSON.parse(chatData);
                if (parsedChat && parsedChat.messages && parsedChat.messages.length > 0) {
                  console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç #${chatNumber} –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∞`);
                  
                  restoredChats.push({
                    id: parsedChat.id || `restored_${sessionId}_${chatNumber}`,
                    test_session_id: sessionId,
                    chat_number: chatNumber,
                    messages: parsedChat.messages,
                    created_at: parsedChat.timestamp || new Date().toISOString(),
                    updated_at: new Date().toISOString()
                  });
                  
                  hasRestoredAny = true;
                }
              } catch (parseError) {
                console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫—ç—à–∞ –¥–ª—è —á–∞—Ç–∞ #${chatNumber}:`, parseError);
              }
            }
          }
          
          if (hasRestoredAny) {
            console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredChats.length} —á–∞—Ç–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—ç—à–µ–π`);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —á–∞—Ç–∞
            restoredChats.sort((a, b) => a.chat_number - b.chat_number);
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∫—ç—à
            sessionStorage.setItem(`chat_history_${sessionId}`, JSON.stringify({
              timestamp: new Date().toISOString(),
              chats: restoredChats
            }));
            
            return restoredChats;
          }
        } catch (e) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—ç—à–µ–π:', e);
        }
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ localStorage
      if (typeof localStorage !== 'undefined') {
        const cachedData = localStorage.getItem(`chat_history_${sessionId}`);
        if (cachedData) {
          try {
            const parsed = JSON.parse(cachedData);
            if (parsed && parsed.chats && Array.isArray(parsed.chats) && parsed.chats.length > 0) {
              console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${parsed.chats.length} —á–∞—Ç–æ–≤ –∏–∑ localStorage`);
              return parsed.chats as Chat[];
            }
          } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', e);
          }
        }
      }
      
      console.warn('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ –∫—ç—à–µ');
      
      // –ù–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (!data || data.length === 0) {
        console.log('–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
      }
    } else {
      // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—Ç–æ–º –ø—Ä–æ–ø–∞–¥—É—Ç
      console.log(`Fetched ${data.length} chats for session:`, sessionId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, –µ—Å–ª–∏ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (typeof sessionStorage !== 'undefined') {
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π –∫—ç—à
          sessionStorage.setItem(`chat_history_${sessionId}`, JSON.stringify({
            timestamp: new Date().toISOString(),
            chats: data
          }));
          
          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          data.forEach(chat => {
            if (chat.chat_number) {
              const chatCacheKey = `chat_${sessionId}_${chat.chat_number}`;
              sessionStorage.setItem(chatCacheKey, JSON.stringify({
                timestamp: new Date().toISOString(),
                id: chat.id,
                test_session_id: chat.test_session_id,
                chat_number: chat.chat_number,
                messages: chat.messages
              }));
            }
          });
          
          console.log('–í—Å–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (e) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–æ–≤:', e);
        }
      }
    }
    
    return data || [];
  } catch (error) {
    console.error('Error in getChatHistory:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (typeof sessionStorage !== 'undefined') {
      const cachedData = sessionStorage.getItem(`chat_history_${sessionId}`);
      if (cachedData) {
        try {
          const parsed = JSON.parse(cachedData);
          if (parsed && parsed.chats && Array.isArray(parsed.chats) && parsed.chats.length > 0) {
            console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${parsed.chats.length} —á–∞—Ç–æ–≤ –∏–∑ sessionStorage –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏`);
            return parsed.chats as Chat[];
          }
        } catch (e) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
        }
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—ç—à–µ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        const restoredChats: Chat[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —á–∞—Ç–∞ (1-4)
        for (let chatNum = 1; chatNum <= 4; chatNum++) {
          const chatNumber = chatNum as 1 | 2 | 3 | 4;
          const chatCacheKey = `chat_${sessionId}_${chatNumber}`;
          const chatData = sessionStorage.getItem(chatCacheKey);
          
          if (chatData) {
            try {
              const parsedChat = JSON.parse(chatData);
              if (parsedChat && parsedChat.messages && parsedChat.messages.length > 0) {
                console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç #${chatNumber} –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏`);
                
                restoredChats.push({
                  id: parsedChat.id || `error_restored_${sessionId}_${chatNumber}`,
                  test_session_id: sessionId,
                  chat_number: chatNumber,
                  messages: parsedChat.messages,
                  created_at: parsedChat.timestamp || new Date().toISOString(),
                  updated_at: new Date().toISOString()
                });
              }
            } catch (parseError) {
              console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫—ç—à–∞ –¥–ª—è —á–∞—Ç–∞ #${chatNumber}:`, parseError);
            }
          }
        }
        
        if (restoredChats.length > 0) {
          console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${restoredChats.length} —á–∞—Ç–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—ç—à–µ–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏`);
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —á–∞—Ç–∞
          restoredChats.sort((a, b) => a.chat_number - b.chat_number);
          return restoredChats;
        }
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—ç—à–µ–π –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', e);
      }
    }
    
    throw error;
  }
}

export async function getTestSession(sessionId: string): Promise<TestSession | null> {
  if (!sessionId) {
    console.error('[getTestSession] –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π ID —Å–µ—Å—Å–∏–∏');
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ UUID
  if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(sessionId)) {
    console.error('[getTestSession] –û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID:', sessionId);
    return null;
  }
  
  console.log('[getTestSession] –ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏:', sessionId);
  
  try {
    const { data, error } = await supabase
      .from('test_sessions')
      .select('*, employee:employees(*)')
      .eq('id', sessionId)
      .single();
      
    if (error) {
      if (error.code === 'PGRST116') {
        console.log('[getTestSession] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
        return null;
      }
      console.error('[getTestSession] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
      throw error;
    }
    
    if (!data) {
      console.log('[getTestSession] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ):', sessionId);
      return null;
    }
    
    console.log('[getTestSession] –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:', data.id);
    console.log('[getTestSession] –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', data.employee ? 
      `ID=${data.employee.id}, –∏–º—è=${data.employee.first_name}` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    
    return data;
  } catch (error) {
    console.error('[getTestSession] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

/**
 * Completes all active test sessions for an employee
 */
export async function completeAllEmployeeTestSessions(employeeId: string): Promise<void> {
  try {
    console.log('Completing all active test sessions for employee:', employeeId);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const { data: activeSessions, error: fetchError } = await supabase
      .from('test_sessions')
      .select('id')
      .eq('employee_id', employeeId)
      .eq('completed', false);
      
    if (fetchError) {
      console.error('Error fetching active sessions:', fetchError);
      throw fetchError;
    }
    
    if (!activeSessions || activeSessions.length === 0) {
      console.log('No active sessions found for employee:', employeeId);
      return;
    }
    
    console.log(`Found ${activeSessions.length} active sessions to complete`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    const currentTime = new Date().toISOString();
    const { error: updateError } = await supabase
      .from('test_sessions')
      .update({
        end_time: currentTime,
        completed: true,
        updated_at: currentTime
      })
      .eq('employee_id', employeeId)
      .eq('completed', false);
      
    if (updateError) {
      console.error('Error completing sessions:', updateError);
      throw updateError;
    }
    
    console.log(`Successfully completed ${activeSessions.length} sessions for employee:`, employeeId);
  } catch (error) {
    console.error('Error in completeAllEmployeeTestSessions:', error);
    throw error;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 */
export async function saveTestResult(testResult: Omit<TestResult, 'id' | 'created_at' | 'updated_at'>): Promise<TestResult> {
  try {
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞. Session ID:', testResult.test_session_id, 'Employee ID:', testResult.employee_id);
    
    if (!testResult.test_session_id) {
      throw new Error('test_session_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    if (!testResult.employee_id) {
      throw new Error('employee_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤
    const normalizedSessionId = testResult.test_session_id.trim().toLowerCase();
    const normalizedEmployeeId = testResult.employee_id.trim().toLowerCase();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const sanitizedTestResult = {
      ...testResult,
      test_session_id: normalizedSessionId,
      employee_id: normalizedEmployeeId
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º rpc –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –µ–¥–∏–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–∏–º test_session_id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    const { data: existingResults, error: checkError } = await supabase.rpc('get_test_result_with_lock', {
      p_test_session_id: normalizedSessionId,
      p_employee_id: normalizedEmployeeId
    });
    
    if (checkError) {
      // –ï—Å–ª–∏ RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.warn('RPC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', checkError);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –ò —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const { data: fallbackResults, error: fallbackError } = await supabase
        .from('test_results')
        .select('id, updated_at')
        .eq('test_session_id', normalizedSessionId)
        .eq('employee_id', normalizedEmployeeId)
        .order('updated_at', { ascending: false });
        
      if (fallbackError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', fallbackError);
        throw fallbackError;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (fallbackResults && fallbackResults.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ. ID:', fallbackResults[0].id);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        const { data: updatedData, error: updateError } = await supabase
          .from('test_results')
          .update({
            ...sanitizedTestResult,
            updated_at: new Date().toISOString()
          })
          .eq('id', fallbackResults[0].id)
          .select()
          .single();
          
        if (updateError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', updateError);
          throw updateError;
        }
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedData);
        return updatedData;
      } else {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        try {
          const { data, error } = await supabase
            .from('test_results')
            .insert([{
              ...sanitizedTestResult,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }])
            .select()
            .single();
          
          if (error) {
            throw error;
          }
          
          console.log('–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
          return data;
        } catch (insertError) {
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å:', insertError);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å –∏–∑-–∑–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
          const { data: retryResults, error: retryError } = await supabase
            .from('test_results')
            .select('id')
            .eq('test_session_id', normalizedSessionId)
            .eq('employee_id', normalizedEmployeeId)
            .limit(1);
            
          if (retryError || !retryResults || retryResults.length === 0) {
            // –ï—Å–ª–∏ –∏ —Å–µ–π—á–∞—Å –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
            throw insertError;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
          const { data: updatedAfterRetry, error: updateRetryError } = await supabase
            .from('test_results')
            .update({
              ...sanitizedTestResult,
              updated_at: new Date().toISOString()
            })
            .eq('id', retryResults[0].id)
            .select()
            .single();
            
          if (updateRetryError) {
            throw updateRetryError;
          }
          
          console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏:', updatedAfterRetry);
          return updatedAfterRetry;
        }
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    if (existingResults && existingResults.length > 0) {
      console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ RPC, –æ–±–Ω–æ–≤–ª—è–µ–º. ID:', existingResults[0].id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { data: updatedData, error: updateError } = await supabase
        .from('test_results')
        .update({
          ...sanitizedTestResult,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingResults[0].id)
        .select()
        .single();
        
      if (updateError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', updateError);
        throw updateError;
      }
      
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ RPC:', updatedData);
      return updatedData;
    } else {
      console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ RPC');
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ RPC —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const { data: insertedData, error: insertError } = await supabase.rpc('insert_test_result_safe', {
        p_test_session_id: normalizedSessionId,
        p_employee_id: normalizedEmployeeId,
        p_test_result: {
          ...sanitizedTestResult,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      });
      
      if (insertError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —á–µ—Ä–µ–∑ RPC:', insertError);
        
        // –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –≤—Å—Ç–∞–≤–∫—É –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        const { data, error } = await supabase
          .from('test_results')
          .insert([{
            ...sanitizedTestResult,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }])
          .select()
          .single();
          
        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π –≤—Å—Ç–∞–≤–∫–µ:', error);
          throw error;
        }
        
        console.log('–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±—ã—á–Ω—ã–º –º–µ—Ç–æ–¥–æ–º:', data);
        return data;
      }
      
      console.log('–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ RPC:', insertedData);
      return insertedData;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ saveTestResult:', error);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
    try {
      if (testResult.test_session_id && testResult.employee_id) {
        const normalizedSessionId = testResult.test_session_id.trim().toLowerCase();
        const normalizedEmployeeId = testResult.employee_id.trim().toLowerCase();
        
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...');
        const { data: existingRecord } = await supabase
          .from('test_results')
          .select('*')
          .eq('test_session_id', normalizedSessionId)
          .eq('employee_id', normalizedEmployeeId)
          .order('updated_at', { ascending: false })
          .limit(1);
          
        if (existingRecord && existingRecord.length > 0) {
          console.log('–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', existingRecord[0]);
          return existingRecord[0];
        }
      }
    } catch (finalCheckError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', finalCheckError);
    }
    
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
 */
export async function getTestResultForSession(sessionId: string): Promise<TestResult | null> {
  try {
    console.log('[getTestResultForSession] –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
    
    if (!sessionId) {
      console.error('[getTestResultForSession] –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π ID —Å–µ—Å—Å–∏–∏');
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ UUID
    if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(sessionId)) {
      console.error('[getTestResultForSession] –û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID:', sessionId);
      return null;
    }
    
    console.log('[getTestResultForSession] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ sessionId
    const { data: allResults, error: allResultsError } = await supabase
        .from('test_results')
        .select('*')
        .eq('test_session_id', sessionId)
        .order('updated_at', { ascending: false });
        
    if (allResultsError) {
      console.error('[getTestResultForSession] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', allResultsError);
      throw allResultsError;
    }
    
    if (!allResults || allResults.length === 0) {
      console.log('[getTestResultForSession] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
      return null;
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
    if (allResults.length > 1) {
      console.log(`[getTestResultForSession] –ù–∞–π–¥–µ–Ω–æ ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π.`);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ updated_at (—Ö–æ—Ç—è —ç—Ç–æ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ)
      const sortedResults = [...allResults].sort((a, b) => {
        return new Date(b.updated_at || 0).getTime() - new Date(a.updated_at || 0).getTime();
      });
      
      const mostRecentResult = sortedResults[0];
      console.log('[getTestResultForSession] –í—ã–±—Ä–∞–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', mostRecentResult.id);
      console.log('[getTestResultForSession] –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', mostRecentResult.updated_at);
      
      if (sortedResults.length > 1) {
        console.warn(`[getTestResultForSession] –í–ù–ò–ú–ê–ù–ò–ï: –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è ${sortedResults.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);
      }
      
      return mostRecentResult;
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('[getTestResultForSession] –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', allResults[0].id);
    console.log('[getTestResultForSession] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', 
      allResults[0].analysis_result ? '–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω' : '–ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    return allResults[0];
  } catch (error) {
    console.error('[getTestResultForSession] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export async function getTestResultsForEmployee(employeeId: string): Promise<TestResult[]> {
  try {
    console.log('Fetching test results for employee:', employeeId);
    
    const { data, error } = await supabase
        .from('test_results')
      .select('*')
      .eq('employee_id', employeeId)
      .order('created_at', { ascending: false });
      
    if (error) {
      console.error('Error fetching test results:', error);
      throw error;
    }
    
    console.log(`Fetched ${data?.length || 0} test results for employee:`, employeeId);
    return data || [];
  } catch (error) {
    console.error('Error in getTestResultsForEmployee:', error);
    throw error;
  }
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏ –≤ –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
export async function generateAnalysisPrompt(sessionId: string): Promise<string> {
  try {
    console.log('Generating analysis prompt for session:', sessionId);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
    const chats = await getTestSessionChats(sessionId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    const session = await getTestSession(sessionId);
    
    if (!chats || chats.length === 0) {
      throw new Error('No chats found for session');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–º–ø—Ç–∞
    const promptHeader = `–¢—ã ‚Äî Grok 3, —Å–æ–∑–¥–∞–Ω–Ω—ã–π xAI. –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º —á–∞—Ç—Ç–µ—Ä–æ–º (—Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã OnlyFans) –∏ AI-–∫–ª–∏–µ–Ω—Ç–æ–º OnlyFans. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –æ—Ü–µ–Ω–∏—Ç—å —á–∞—Ç—Ç–µ—Ä–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º 6 –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (Engagement): –ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ —á–∞—Ç—Ç–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –≤–æ–≤—Ä–µ–º—è –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ.
–û–±–∞—è–Ω–∏–µ –∏ —Ç–æ–Ω (Charm and Tone): –ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Ç—Ç–µ—Ä –¥—Ä—É–∂–µ–ª—é–±–µ–Ω, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è.
–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (Creativity): –ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Ç—Ç–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç –æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–±–µ–≥–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏.
–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å (Adaptability): –ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Ç—Ç–µ—Ä –≥–∏–±–∫–æ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞.
–£–º–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–µ–±—è (Self-Promotion): –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–∞—Ç—Ç–µ—Ä –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.
–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ (Pricing Policy): –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–∞—Ç—Ç–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ü–µ–Ω—ã, –æ–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–æ–∏—Ö —É—Å–ª—É–≥ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ —Ü–µ–Ω–µ.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è:
–í—ã—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 5 (–≥–¥–µ 0 ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ, 5 ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ).
–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π), –æ–±—ä—è—Å–Ω—è—é—â–∏–π –æ—Ü–µ–Ω–∫—É, –≤–∫–ª—é—á–∞—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.

–î–ª—è –∫—Ä–∏—Ç–µ—Ä–∏—è "–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞" –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω (strengths) –∏ –æ–±–ª–∞—Å—Ç–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏—è (improvements).

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç—Ä–µ–º —ç—Ç–∞–ø–∞–º:
1. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ (Introduction): –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–∞—Ç—Ç–µ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.
2. –ü—Ä–æ–≥—Ä–µ–≤ (Warmup): –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–∞—Ç—Ç–µ—Ä –ø–æ–¥–æ–≥—Ä–µ–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.
3. –ü—Ä–æ–¥–∞–∂–∞/–ó–∞–∫—Ä—ã—Ç–∏–µ (Closing): –ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–∞—Ç—Ç–µ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞:
–í—ã—Å—Ç–∞–≤—å –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 5 (–≥–¥–µ 0 ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ, 5 ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ).
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω (strengths) –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω (weaknesses).

–ù–∂—É–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –≤–æ—Ç –Ω–∞–≤–æ–¥—è—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ–±—ã –ø–æ–Ω–∏–∂–∞—Ç—å –±–∞–ª–ª

-—Ç–µ—Å—Ç –∏–¥—ë—Ç 20 –º–∏–Ω—É—Ç
-–Ω—É–∂–Ω–æ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏ –æ–±—å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π —á—Ç–æ–± —Å –∫–∞–∂–¥—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –±—ã–ª–æ –º–∏–Ω–∏–º—É–º –ø–æ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
-–∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Å—Ç–∞–¥–∏–∏, –∏–Ω–∞—á–µ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∑–∫–∞—è:
1)–°—Ç–∞–¥–∏—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è: 5 -10 —Å–æ–æ–±—â–µ–Ω–∏–π –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–≤–æ–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã –∏ –Ω–µ –ø–æ—à–ª—ã–µ
2)C—Ç–∞–¥–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞: –ø–æ –¥–∏–∞–ª–æ–≥—É –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ —á–∞—Ç—Ç–µ—Ä –º–µ–Ω–µ–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω —á–µ–º –∫–ª–∏–µ–Ω—Ç, —á–∞—Ç—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–∞–º–µ–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–¥—Ç–µ–∫—Å—Ç –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ
3)–°—Ç–∞–¥–∏—è –ø—Ä–æ–¥–∞–∂: –Ω—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø–æ—à–ª—ã–º –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±–µ–∑ –≤–æ–¥–≤–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ—è—Ç—Å—è –∫–∞–∫ –¥–≤–∞ –Ω–∞–≤–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞–º–µ–∫–∞—é—â–∏—Ö –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂ —Ç–µ–º –ª—É—á—à–µ
-—Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —á—Ç–æ–± —á–∞—Ç—Ç–µ—Ä –Ω–µ —É–ø—Ä–∞—à–∏–≤–∞–ª –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ —à–ª—é—Ö–∞, —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –≥–ª—É–±–∏–Ω—É —á–µ–∫–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∏–π –±–∞–ª –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–ª —á–∞–µ–≤—ã–µ, —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ —Ç–æ —á—Ç–æ –æ–Ω –¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞, —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã

–í–ê–ñ–ù–û: –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –í–ö–õ–Æ–ß–ê–Ø –í–°–ï –í–ï–†–î–ò–ö–¢–´, –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø, –°–ü–ò–°–ö–ò –°–ò–õ–¨–ù–´–• –ò –°–õ–ê–ë–´–• –°–¢–û–†–û–ù. –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ê–ù–ì–õ–ò–ô–°–ö–ò–ô –Ø–ó–´–ö –ù–ò –í –ö–ê–ö–ò–• –ß–ê–°–¢–Ø–• –û–¢–í–ï–¢–ê.

–°–¢–†–û–ì–û –û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –í JSON –§–û–†–ú–ê–¢–ï, –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê –î–û –ò–õ–ò –ü–û–°–õ–ï JSON.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "dialog_analysis": {
    "metrics": {
      "engagement": {
        "score": ,
        "verdict": ""
      },
      "charm_and_tone": {
        "score": ,
        "verdict": ""
      },
      "creativity": {
        "score": ,
        "verdict": ""
      },
      "adaptability": {
        "score": ,
        "verdict": ""
      },
      "self_promotion": {
        "score": ,
        "verdict": ""
      },
      "pricing_policy": {
        "score": ,
        "verdict": "",
        "strengths": [],
        "improvements": []
      },
      "sales_stages": {
        "introduction": {
          "score": ,
          "strengths": [],
          "weaknesses": []
        },
        "warmup": {
          "score": ,
          "strengths": [],
          "weaknesses": []
        },
        "closing": {
          "score": ,
          "strengths": [],
          "weaknesses": []
        }
      }
    },
    "overall_conclusion": "",
    "result_summary": ""
  }
}

"result_summary" - —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ–µ (–¥–æ 200 —Å–ª–æ–≤) —Ä–µ–∑—é–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, –≤–∫–ª—é—á–∞—é—â–µ–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è, –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–∞.

–í–æ—Ç –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
`;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    const chatPrompts = chats.map(chat => {
      const chatNumber = chat.chat_number;
      let characterType = '';
      
      switch(chatNumber) {
        case 1:
          characterType = '–°—Ç—Ä–∞—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (Marcus)';
          break;
        case 2:
          characterType = '–ö–∞–ø—Ä–∏–∑–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (Shrek)';
          break;
        case 3:
          characterType = '–≠–∫–æ–Ω–æ–º–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, —Ç–æ—Ä–≥—É—é—â–∏–π—Å—è –æ —Ü–µ–Ω–µ (Oliver)';
          break;
        case 4:
          characterType = '–ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –≥—Ä–∞–Ω–∏—Ü—ã (Alex)';
          break;
        default:
          characterType = `–ö–ª–∏–µ–Ω—Ç ${chatNumber}`;
      }
      
      const messages = chat.messages || [];
      if (messages.length === 0) {
        return `\n\n--- –ß–∞—Ç ${chatNumber} (${characterType}) ---\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π`;
      }
      
      const formattedMessages = messages.map(msg => {
        const roleLabel = msg.isOwn ? '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å' : `AI-–∫–ª–∏–µ–Ω—Ç (${characterType})`;
        return `${roleLabel}: ${msg.content}`;
      }).join('\n');
      
      return `\n\n--- –ß–∞—Ç ${chatNumber} (${characterType}) ---\n${formattedMessages}`;
    }).join('');
    
    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const fullPrompt = promptHeader + chatPrompts;
    
    console.log('Analysis prompt generated successfully, length:', fullPrompt.length);
    return fullPrompt;
  } catch (error) {
    console.error('Error generating analysis prompt:', error);
    throw error;
  }
}

export async function saveCandidateForm(formData: CandidateFormInput) {
  try {
    console.log('Saving candidate form data for user:', formData.employee_id, formData);
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const employeeId = formData.employee_id;
    
    if (!employeeId) {
      throw new Error('ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ employees
    if (formData.first_name) {
      const { error: nameUpdateError } = await supabase
        .from('employees')
        .update({ first_name: formData.first_name })
        .eq('id', employeeId);
        
      if (nameUpdateError) {
        console.error('Error updating employee name:', nameUpdateError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–Ω–∫–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const { data: existingForm, error: checkError } = await supabase
      .from('candidate_forms')
      .select('id')
      .eq('employee_id', employeeId)
      .single();
      
    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 - –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      console.error('Error checking existing form:', checkError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    const formDataToSave = {
      telegram_tag: formData.telegram_tag,
      shift: formData.shift,
      experience: formData.experience,
      motivation: formData.motivation,
      about_me: formData.about_me,
      updated_at: new Date().toISOString()
    };
    
    let result;
    
    // –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
    if (existingForm) {
      console.log('Updating existing candidate form:', existingForm.id);
      
      const { data, error } = await supabase
        .from('candidate_forms')
        .update(formDataToSave)
        .eq('id', existingForm.id)
        .select()
        .single();
        
      if (error) {
        console.error('Error updating candidate form:', error);
        throw new Error(`Error updating candidate form: ${error.message}`);
      }
      
      result = data;
    } else {
      // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
      console.log('Creating new candidate form for employee:', employeeId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º employee_id –∫ –¥–∞–Ω–Ω—ã–º –∞–Ω–∫–µ—Ç—ã
      const newFormData = {
        ...formDataToSave,
        employee_id: employeeId,
      };
      
      const { data, error } = await supabase
        .from('candidate_forms')
        .insert([newFormData])
        .select()
        .single();
        
      if (error) {
        console.error('Error saving candidate form:', error);
        throw new Error(`Error saving candidate form: ${error.message}`);
      }
      
      result = data;
    }
    
    console.log('Candidate form saved successfully:', result);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const { data: tokenData } = await supabase
        .from('candidate_tokens')
        .select('token')
        .eq('employee_id', employeeId)
        .eq('is_used', false)
        .order('created_at', { ascending: false })
        .limit(1);
        
      if (tokenData && tokenData.length > 0) {
        // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        await markTokenAsUsed(tokenData[0].token);
      }
    } catch (tokenError) {
      console.warn('Error marking token as used after form save:', tokenError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å —Ç–æ–∫–µ–Ω–æ–º
    }
    
    // –û—á–∏—â–∞–µ–º sessionStorage –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (typeof sessionStorage !== 'undefined') {
      sessionStorage.removeItem('candidateFormData');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º employee_id –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return {
      ...result,
      employee_id: employeeId
    };
  } catch (error) {
    console.error('Error in saveCandidateForm:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –ø–æ id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
export async function getCandidateFormByEmployeeId(employeeId: string): Promise<CandidateFormData | null> {
  try {
    const { data, error } = await supabase
      .from('candidate_forms')
      .select('*')
      .eq('employee_id', employeeId)
      .single();

    if (error) {
      console.error('Error fetching candidate form:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('Error in getCandidateFormByEmployeeId:', error);
    return null;
  }
}

export async function createUser(userData: {
  first_name: string;
  email: string;
  phone: string;
}): Promise<User> {
  try {
    const { data, error } = await supabase
      .from('users')
      .insert([
        {
          first_name: userData.first_name,
          email: userData.email,
          phone: userData.phone,
        },
      ])
      .select();

    if (error) {
      console.error('Error creating user:', error);
      throw new Error('Failed to create user');
    }

    if (!data || data.length === 0) {
      throw new Error('No data returned from the database');
    }

    return data[0];
  } catch (error) {
    console.error('Error in createUser:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ —Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
export async function createCandidateToken(employeeId: string): Promise<string> {
  try {
    console.log('Creating candidate token for employee:', employeeId);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    const token = Math.random().toString(36).substring(2, 10) + 
                 Date.now().toString(36) + 
                 Math.random().toString(36).substring(2, 10);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (7 –¥–Ω–µ–π)
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7);
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try {
      await supabase
        .from('candidate_tokens')
        .update({ is_used: true })
        .eq('employee_id', employeeId)
        .eq('is_used', false);
        
      console.log('Deactivated previous tokens for employee:', employeeId);
    } catch (deactivateError) {
      console.warn('Error deactivating previous tokens:', deactivateError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('candidate_tokens')
      .insert([
        {
          employee_id: employeeId,
          token: token,
          expires_at: expiresAt.toISOString(),
          is_used: false
        }
      ])
      .select()
      .single();
      
    if (error) {
      console.error('Error creating candidate token:', error);
      throw new Error(`Failed to create candidate token: ${error.message}`);
    }
    
    if (!data) {
      throw new Error('No data returned from candidate token creation');
    }
    
    console.log('Token created successfully:', data.token);
    return data.token;
  } catch (error) {
    console.error('Error in createCandidateToken:', error);
    throw error;
  }
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
 */
export type TokenValidationResult = {
  success: boolean;
  employeeId?: string;
  errorCode?: 'INVALID_FORMAT' | 'NOT_FOUND' | 'EXPIRED' | 'ALREADY_USED' | 'UNKNOWN_ERROR';
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export async function validateCandidateToken(token: string): Promise<TokenValidationResult> {
  try {
    if (!token || typeof token !== 'string' || token.length < 5) {
      console.error('Invalid token format:', token);
      return {
        success: false,
        errorCode: 'INVALID_FORMAT'
      };
    }
    
    console.log('Validating candidate token:', token);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('candidate_tokens')
      .select('id, employee_id, expires_at, is_used')
      .eq('token', token)
      .single();
    
    if (error) {
      console.error('Error validating token:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
      if (error.code === 'PGRST116') {
        // –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        console.error('Token not found:', token);
        return {
          success: false,
          errorCode: 'NOT_FOUND'
        };
      }
      
      throw error;
    }
    
    if (!data) {
      console.error('No token data found');
      return {
        success: false,
        errorCode: 'NOT_FOUND'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    const expiresAt = new Date(data.expires_at);
    const now = new Date();
    
    if (expiresAt < now) {
      console.error('Token has expired:', {
        token: token,
        expires_at: data.expires_at,
        current_time: now.toISOString()
      });
      return {
        success: false,
        errorCode: 'EXPIRED'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
    if (data.is_used) {
      console.error('Token has already been used:', token);
      return {
        success: false,
        errorCode: 'ALREADY_USED',
        employeeId: data.employee_id // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      };
    }
    
    // –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    // –≠—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è markTokenAsUsed
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
    return {
      success: true,
      employeeId: data.employee_id
    };
  } catch (error) {
    console.error('Exception in validateCandidateToken:', error);
    return {
      success: false,
      errorCode: 'UNKNOWN_ERROR'
    };
  }
}

/**
 * –û—Ç–º–µ—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞
 */
export async function markTokenAsUsed(token: string): Promise<boolean> {
  try {
    if (!token || typeof token !== 'string') {
      console.error('Invalid token to mark as used');
      return false;
    }
    
    console.log('Marking candidate token as used:', token);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from('candidate_tokens')
      .select('id, is_used')
      .eq('token', token)
      .single();
    
    if (error || !data) {
      console.error('Error fetching token to mark as used:', error);
      return false;
    }
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (data.is_used) {
      console.log('Token already marked as used:', token);
      return true;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
    const { error: updateError } = await supabase
      .from('candidate_tokens')
      .update({ is_used: true })
      .eq('id', data.id);
      
    if (updateError) {
      console.error('Error marking token as used:', updateError);
      return false;
    }
    
    console.log('Token successfully marked as used:', token);
    return true;
  } catch (error) {
    console.error('Exception in markTokenAsUsed:', error);
    return false;
  }
}

export async function getCandidateForm(employeeId: string) {
  try {
    if (!employeeId) {
      console.error('No employee ID provided for getCandidateForm');
      return null;
    }

    const { data, error } = await supabase
      .from('candidate_forms')
      .select('*')
      .eq('employee_id', employeeId)
      .single();

    if (error) {
      console.error('Error fetching candidate form:', error);
      return null;
    }

    return data;
  } catch (error) {
    console.error('Exception in getCandidateForm:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ (–ø–µ—á–∞—Ç–∞–Ω–∏–µ, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏ —Ç.–¥.)
export async function updateChatStatus(sessionId: string, chatNumber: 1 | 2 | 3 | 4, status: { isTyping?: boolean, unreadCount?: number }) {
  try {
    console.log('Updating chat status:', { sessionId, chatNumber, status });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    const session = await getTestSession(sessionId);
    
    if (!session) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (session.completed) {
      throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç –ø–æ –Ω–æ–º–µ—Ä—É
    const { data: chats, error: chatsError } = await supabase
      .from('chats')
      .select('*')
      .eq('test_session_id', sessionId)
      .eq('chat_number', chatNumber);
    
    if (chatsError) {
      console.error('Error fetching chat:', chatsError);
      throw chatsError;
    }
    
    if (!chats || chats.length === 0) {
      console.warn('Chat not found, creating a new one');
      
      // –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      const { data: newChat, error: createError } = await supabase
        .from('chats')
        .insert({
          test_session_id: sessionId,
          chat_number: chatNumber,
          messages: [],
          metadata: status // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        })
        .select();
      
      if (createError) {
        console.error('Error creating chat:', createError);
        throw createError;
      }
      
      return newChat?.[0] || null;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
    const chat = chats[0];
    const existingMetadata = chat.metadata || {};
    
    const { data: updatedChat, error: updateError } = await supabase
      .from('chats')
      .update({
        metadata: {
          ...existingMetadata,
          ...status
        },
        updated_at: new Date().toISOString()
      })
      .eq('id', chat.id)
      .select();
    
    if (updateError) {
      console.error('Error updating chat metadata:', updateError);
      throw updateError;
    }
    
    console.log('Chat status updated successfully');
    return updatedChat?.[0] || null;
  } catch (error) {
    console.error('Error in updateChatStatus:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param sessionId ID —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param totalDurationSeconds –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é TIMER_DURATION_SECONDS)
 * @returns –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ 0, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
 */
export async function getRemainingSessionTime(
  sessionId: string, 
  totalDurationSeconds: number = TIMER_DURATION_SECONDS
): Promise<number> {
  try {
    if (!sessionId) {
      console.error('[getRemainingSessionTime] –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π ID —Å–µ—Å—Å–∏–∏');
      return 0;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
    const session = await getTestSession(sessionId);
    
    if (!session) {
      console.error('[getRemainingSessionTime] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
      return 0;
    }
    
    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if (session.completed) {
      console.log('[getRemainingSessionTime] –°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', sessionId);
      return 0;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    const startTime = new Date(session.start_time).getTime();
    const currentTime = Date.now();
    const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);
    const remainingSeconds = Math.max(0, totalDurationSeconds - elapsedSeconds);
    
    console.log('[getRemainingSessionTime] –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:', remainingSeconds, '—Å–µ–∫—É–Ω–¥');
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (remainingSeconds === 0 && !session.completed) {
      console.log('[getRemainingSessionTime] –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é:', sessionId);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
      await completeTestSession(sessionId);
    }
    
    return remainingSeconds;
  } catch (error) {
    console.error('[getRemainingSessionTime] –û—à–∏–±–∫–∞:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã UI –Ω–µ —Å–ª–æ–º–∞–ª—Å—è
    return totalDurationSeconds;
  }
}

/**
 * –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
 * @param sessionId ID —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param additionalSeconds –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 */
export async function extendSessionTime(
  sessionId: string,
  additionalSeconds: number = TIMER_DURATION_SECONDS // TIMER_DURATION_SECONDS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
): Promise<number> {
  try {
    if (!sessionId) {
      console.error('[extendSessionTime] –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π ID —Å–µ—Å—Å–∏–∏');
      return 0;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    const remainingTime = await getRemainingSessionTime(sessionId);
    
    if (remainingTime <= 0) {
      console.log('[extendSessionTime] –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é:', sessionId);
      return 0;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await getTestSession(sessionId);
    
    if (!session) {
      console.error('[extendSessionTime] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
      return remainingTime;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (—Å–¥–≤–∏–≥–∞–µ–º –Ω–∞–∑–∞–¥)
    const currentStartTime = new Date(session.start_time).getTime();
    const newStartTime = new Date(currentStartTime - additionalSeconds * 1000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
    await updateTestSession(sessionId, {
      start_time: newStartTime.toISOString()
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    const updatedRemainingTime = await getRemainingSessionTime(sessionId);
    
    console.log('[extendSessionTime] –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞', additionalSeconds, '—Å–µ–∫—É–Ω–¥. –ù–æ–≤–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:', updatedRemainingTime);
    
    return updatedRemainingTime;
  } catch (error) {
    console.error('[extendSessionTime] –û—à–∏–±–∫–∞:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    return await getRemainingSessionTime(sessionId);
  }
}