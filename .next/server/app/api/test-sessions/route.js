"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/test-sessions/route";
exports.ids = ["app/api/test-sessions/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-sessions%2Froute&page=%2Fapi%2Ftest-sessions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-sessions%2Froute.ts&appDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-sessions%2Froute&page=%2Fapi%2Ftest-sessions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-sessions%2Froute.ts&appDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Administrator_Documents_GitHub_onlyfans_last_chance_onlyfans_app_api_test_sessions_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/test-sessions/route.ts */ \"(rsc)/./app/api/test-sessions/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/test-sessions/route\",\n        pathname: \"/api/test-sessions\",\n        filename: \"route\",\n        bundlePath: \"app/api/test-sessions/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Administrator\\\\Documents\\\\GitHub\\\\onlyfans_last_chance\\\\onlyfans\\\\app\\\\api\\\\test-sessions\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Administrator_Documents_GitHub_onlyfans_last_chance_onlyfans_app_api_test_sessions_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/test-sessions/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0ZXN0LXNlc3Npb25zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0ZXN0LXNlc3Npb25zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGVzdC1zZXNzaW9ucyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBZG1pbmlzdHJhdG9yJTVDRG9jdW1lbnRzJTVDR2l0SHViJTVDb25seWZhbnNfbGFzdF9jaGFuY2UlNUNvbmx5ZmFucyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDQWRtaW5pc3RyYXRvciU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q29ubHlmYW5zX2xhc3RfY2hhbmNlJTVDb25seWZhbnMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzhEO0FBQzNJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb25seWZhbnMvPzJjODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcQWRtaW5pc3RyYXRvclxcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXG9ubHlmYW5zX2xhc3RfY2hhbmNlXFxcXG9ubHlmYW5zXFxcXGFwcFxcXFxhcGlcXFxcdGVzdC1zZXNzaW9uc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGVzdC1zZXNzaW9ucy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Rlc3Qtc2Vzc2lvbnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3Rlc3Qtc2Vzc2lvbnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxBZG1pbmlzdHJhdG9yXFxcXERvY3VtZW50c1xcXFxHaXRIdWJcXFxcb25seWZhbnNfbGFzdF9jaGFuY2VcXFxcb25seWZhbnNcXFxcYXBwXFxcXGFwaVxcXFx0ZXN0LXNlc3Npb25zXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS90ZXN0LXNlc3Npb25zL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-sessions%2Froute&page=%2Fapi%2Ftest-sessions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-sessions%2Froute.ts&appDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/test-sessions/route.ts":
/*!****************************************!*\
  !*** ./app/api/test-sessions/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _src_lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../src/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n\n\n// GET /api/test-sessions - получить все сессии или конкретную по id\nasync function GET(request) {\n    try {\n        const url = new URL(request.url);\n        const id = url.searchParams.get(\"id\");\n        const limit = url.searchParams.get(\"limit\") ? parseInt(url.searchParams.get(\"limit\")) : undefined;\n        // Если указан id, возвращаем конкретную сессию\n        if (id) {\n            const session = await (0,_src_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getTestSession)(id);\n            if (!session) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Сессия не найдена\"\n                }, {\n                    status: 404\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(session);\n        }\n        // Иначе возвращаем список всех сессий с ограничением, если оно указано\n        const sessions = await (0,_src_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getRecentTestSessions)(limit || 10);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(sessions);\n    } catch (error) {\n        console.error(\"Error fetching test sessions:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Ошибка при получении данных о тестовых сессиях\"\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/test-sessions - создать новую тестовую сессию\nasync function POST(request) {\n    try {\n        const data = await request.json();\n        const { employeeId } = data;\n        if (!employeeId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"ID сотрудника не указан\"\n            }, {\n                status: 400\n            });\n        }\n        const session = await (0,_src_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createTestSession)(employeeId);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Не удалось создать тестовую сессию\"\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            session\n        });\n    } catch (error) {\n        console.error(\"Error creating test session:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Ошибка при создании тестовой сессии\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PATCH /api/test-sessions - обновить тестовую сессию (завершить или добавить сообщение)\nasync function PATCH(request) {\n    try {\n        const url = new URL(request.url);\n        const id = url.searchParams.get(\"id\");\n        if (!id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"ID сессии не указан\"\n            }, {\n                status: 400\n            });\n        }\n        const data = await request.json();\n        const { action, chatId, message } = data;\n        // Проверяем действие\n        if (action === \"complete\") {\n            // Завершаем сессию\n            const result = await (0,_src_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.completeTestSession)(id);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                ...result\n            });\n        } else if (action === \"addMessage\" && chatId !== undefined && message) {\n            // Добавляем сообщение\n            const result = await (0,_src_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.addMessageToTestSession)(id, chatId, message);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                ...result\n            });\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Недопустимое действие или отсутствуют необходимые параметры\"\n            }, {\n                status: 400\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating test session:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Ошибка при обновлении тестовой сессии\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/test-sessions/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMessageToTestSession: () => (/* binding */ addMessageToTestSession),\n/* harmony export */   completeAllEmployeeTestSessions: () => (/* binding */ completeAllEmployeeTestSessions),\n/* harmony export */   completeTestSession: () => (/* binding */ completeTestSession),\n/* harmony export */   createCandidateToken: () => (/* binding */ createCandidateToken),\n/* harmony export */   createEmployee: () => (/* binding */ createEmployee),\n/* harmony export */   createTestSession: () => (/* binding */ createTestSession),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   deleteEmployee: () => (/* binding */ deleteEmployee),\n/* harmony export */   generateAnalysisPrompt: () => (/* binding */ generateAnalysisPrompt),\n/* harmony export */   getCandidateForm: () => (/* binding */ getCandidateForm),\n/* harmony export */   getCandidateFormByEmployeeId: () => (/* binding */ getCandidateFormByEmployeeId),\n/* harmony export */   getChatHistory: () => (/* binding */ getChatHistory),\n/* harmony export */   getEmployee: () => (/* binding */ getEmployee),\n/* harmony export */   getEmployeeTestSessions: () => (/* binding */ getEmployeeTestSessions),\n/* harmony export */   getEmployees: () => (/* binding */ getEmployees),\n/* harmony export */   getRecentTestSessions: () => (/* binding */ getRecentTestSessions),\n/* harmony export */   getTestResultForSession: () => (/* binding */ getTestResultForSession),\n/* harmony export */   getTestResultsForEmployee: () => (/* binding */ getTestResultsForEmployee),\n/* harmony export */   getTestSession: () => (/* binding */ getTestSession),\n/* harmony export */   getTestSessionChats: () => (/* binding */ getTestSessionChats),\n/* harmony export */   saveCandidateForm: () => (/* binding */ saveCandidateForm),\n/* harmony export */   saveTestResult: () => (/* binding */ saveTestResult),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateChatStatus: () => (/* binding */ updateChatStatus),\n/* harmony export */   updateEmployee: () => (/* binding */ updateEmployee),\n/* harmony export */   updateTestSession: () => (/* binding */ updateTestSession),\n/* harmony export */   validateCandidateToken: () => (/* binding */ validateCandidateToken)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Обновляем доступ к переменным окружения на формат Next.js\nconst supabaseUrl = \"https://amsxabtrixxfzrhinese.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFtc3hhYnRyaXh4ZnpyaGluZXNlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExNTg4NDMsImV4cCI6MjA1NjczNDg0M30.u6P78OG9xPdMsw3I-9A19VMdWviNZerUIPZs1xMGEeQ\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error(\"Missing Supabase environment variables\");\n}\nconsole.log(\"Initializing Supabase client with URL:\", supabaseUrl);\n// Создаем клиента с расширенными опциями\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey, {\n    auth: {\n        autoRefreshToken: true,\n        persistSession: true\n    },\n    global: {\n        fetch: fetch.bind(globalThis)\n    }\n});\n// Проверяем соединение при инициализации\n(async ()=>{\n    if (false) {}\n})();\n// Employee functions\nasync function createEmployee(employeeData) {\n    try {\n        const { data, error } = await supabase.from(\"employees\").insert([\n            {\n                first_name: employeeData.first_name,\n                department: employeeData.department || \"Candidates\",\n                level: employeeData.level || \"Candidate\",\n                success: employeeData.success !== undefined ? employeeData.success : 0,\n                improvement: employeeData.improvement || \"0%\",\n                trend: employeeData.trend || \"up\",\n                status: employeeData.status || \"Новый сотрудник\"\n            }\n        ]).select();\n        if (error) {\n            console.error(\"Error creating employee:\", error);\n            throw new Error(\"Failed to create employee\");\n        }\n        if (!data || data.length === 0) {\n            throw new Error(\"No data returned from the database\");\n        }\n        return data[0];\n    } catch (error) {\n        console.error(\"Error in createEmployee:\", error);\n        throw error;\n    }\n}\nasync function getEmployees() {\n    const { data, error } = await supabase.from(\"employees\").select(\"*\").order(\"created_at\", {\n        ascending: false\n    });\n    if (error) {\n        console.error(\"Error fetching employees:\", error);\n        throw new Error(`Error fetching employees: ${error.message}`);\n    }\n    return data;\n}\nasync function getEmployee(id) {\n    const { data, error } = await supabase.from(\"employees\").select(\"*\").eq(\"id\", id).single();\n    if (error) {\n        console.error(\"Error fetching employee:\", error);\n        throw new Error(`Error fetching employee: ${error.message}`);\n    }\n    if (!data) {\n        throw new Error(\"Employee not found\");\n    }\n    return data;\n}\nasync function updateEmployee(id, employeeData) {\n    try {\n        const { data, error } = await supabase.from(\"employees\").update(employeeData).eq(\"id\", id).select();\n        if (error) {\n            console.error(\"Error updating employee:\", error);\n            throw new Error(\"Failed to update employee\");\n        }\n        if (!data || data.length === 0) {\n            throw new Error(\"No data returned from the database\");\n        }\n        return data[0];\n    } catch (error) {\n        console.error(\"Error in updateEmployee:\", error);\n        throw error;\n    }\n}\nasync function deleteEmployee(id) {\n    const { error } = await supabase.from(\"employees\").delete().eq(\"id\", id);\n    if (error) {\n        console.error(\"Error deleting employee:\", error);\n        throw new Error(`Error deleting employee: ${error.message}`);\n    }\n}\n// Test session functions\nasync function createTestSession(employeeId) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Creating test session:\", {\n            employeeId\n        });\n        // Проверяем, существуют ли уже активные сессии для этого сотрудника\n        const { data: existingSessions, error: checkError } = await supabase.from(\"test_sessions\").select(\"*\").eq(\"employee_id\", employeeId).eq(\"completed\", false).order(\"created_at\", {\n            ascending: false\n        }).limit(1);\n        if (checkError) {\n            console.error(\"❌ Error checking existing sessions:\", checkError);\n        } else if (existingSessions && existingSessions.length > 0) {\n            console.log(\"\\uD83D\\uDD0D Found existing active session for employee:\", existingSessions[0]);\n            // Проверяем, существуют ли чаты для этой сессии\n            const { data: existingChats, error: chatError } = await supabase.from(\"chats\").select(\"*\").eq(\"test_session_id\", existingSessions[0].id).order(\"chat_number\");\n            if (!chatError && existingChats && existingChats.length === 4) {\n                console.log(\"✅ Using existing session with all 4 chats:\", existingChats.map((c)=>({\n                        id: c.id,\n                        chatNumber: c.chat_number\n                    })));\n                return {\n                    ...existingSessions[0],\n                    chats: existingChats\n                };\n            } else if (!chatError && existingChats && existingChats.length > 0) {\n                console.warn(\"⚠️ Found session with incomplete chats:\", existingChats.length);\n                console.log(\"➕ Creating missing chats...\");\n                // Находим, каких чатов не хватает\n                const existingChatNumbers = existingChats.map((c)=>c.chat_number);\n                const missingChatNumbers = [\n                    1,\n                    2,\n                    3,\n                    4\n                ].filter((num)=>!existingChatNumbers.includes(num));\n                if (missingChatNumbers.length > 0) {\n                    console.log(\"\\uD83D\\uDD0D Missing chat numbers:\", missingChatNumbers);\n                    // Создаем недостающие чаты\n                    const additionalChatResults = await Promise.all(missingChatNumbers.map((chatNumber)=>supabase.from(\"chats\").insert([\n                            {\n                                test_session_id: existingSessions[0].id,\n                                chat_number: chatNumber,\n                                messages: []\n                            }\n                        ]).select().single()));\n                    const allChats = [\n                        ...existingChats\n                    ];\n                    let additionalChatsCreated = true;\n                    // Проверяем, что все дополнительные чаты созданы успешно\n                    for(let i = 0; i < additionalChatResults.length; i++){\n                        const { data, error } = additionalChatResults[i];\n                        if (error) {\n                            console.error(`❌ Error creating missing chat ${missingChatNumbers[i]}:`, error);\n                            additionalChatsCreated = false;\n                        } else {\n                            console.log(`✅ Missing chat ${missingChatNumbers[i]} created successfully`);\n                            allChats.push(data);\n                        }\n                    }\n                    if (additionalChatsCreated) {\n                        console.log(\"✅ All missing chats created, using existing session with complete chats\");\n                        return {\n                            ...existingSessions[0],\n                            chats: allChats\n                        };\n                    }\n                }\n            }\n            console.log(\"⚠️ Existing session has incomplete chats, proceeding to create new session\");\n        }\n        // Создаем тестовую сессию\n        const { data: session, error: sessionError } = await supabase.from(\"test_sessions\").insert([\n            {\n                employee_id: employeeId,\n                start_time: new Date().toISOString(),\n                completed: false\n            }\n        ]).select().single();\n        if (sessionError || !session) {\n            console.error(\"❌ Failed to create test session:\", sessionError);\n            throw sessionError || new Error(\"No data returned from test session creation\");\n        }\n        console.log(\"✅ Test session created:\", {\n            id: session.id,\n            employeeId: session.employee_id\n        });\n        // Создаем 4 пустых чата для сессии\n        console.log(\"\\uD83D\\uDD04 Creating 4 chats for session:\", session.id);\n        const chatResults = await Promise.all([\n            1,\n            2,\n            3,\n            4\n        ].map((chatNumber)=>supabase.from(\"chats\").insert([\n                {\n                    test_session_id: session.id,\n                    chat_number: chatNumber,\n                    messages: []\n                }\n            ]).select().single()));\n        // Проверяем, что все чаты созданы успешно\n        const chatErrors = [];\n        const createdChats = [];\n        for(let i = 0; i < chatResults.length; i++){\n            const { data, error } = chatResults[i];\n            if (error) {\n                console.error(`❌ Error creating chat ${i + 1}:`, error);\n                chatErrors.push({\n                    chatNumber: i + 1,\n                    error: error.message\n                });\n            } else {\n                console.log(`✅ Chat ${i + 1} created successfully:`, {\n                    id: data.id,\n                    test_session_id: data.test_session_id,\n                    chat_number: data.chat_number\n                });\n                createdChats.push(data);\n            }\n        }\n        if (chatErrors.length > 0) {\n            console.error(\"❌ Failed to create all chats:\", chatErrors);\n            // Если хоть какие-то чаты созданы, продолжаем с ними\n            if (createdChats.length > 0) {\n                console.warn(`⚠️ Continuing with ${createdChats.length} created chats instead of 4`);\n            } else {\n                throw new Error(\"Failed to create any chats for test session\");\n            }\n        }\n        // Повторно получаем созданные чаты для большей надежности\n        const { data: chats, error: chatsError } = await supabase.from(\"chats\").select(\"*\").eq(\"test_session_id\", session.id).order(\"chat_number\");\n        if (chatsError) {\n            console.error(\"❌ Error fetching created chats:\", chatsError);\n            // Используем те чаты, которые мы уже создали\n            if (createdChats.length > 0) {\n                console.warn(\"⚠️ Using directly created chats instead of fetched ones\");\n                return {\n                    ...session,\n                    chats: createdChats\n                };\n            }\n            throw new Error(\"Failed to fetch created chats\");\n        }\n        // Проверяем, что у нас есть все 4 чата\n        if (!chats || chats.length < 4) {\n            console.warn(`⚠️ Only ${chats?.length || 0} chats found instead of 4, attempting repair`);\n            // Находим, каких чатов не хватает\n            const existingChatNumbers = chats?.map((c)=>c.chat_number) || [];\n            const missingChatNumbers = [\n                1,\n                2,\n                3,\n                4\n            ].filter((num)=>!existingChatNumbers.includes(num));\n            // Создаем недостающие чаты\n            if (missingChatNumbers.length > 0) {\n                console.log(\"➕ Creating missing chat numbers:\", missingChatNumbers);\n                const repairResults = await Promise.all(missingChatNumbers.map((chatNumber)=>supabase.from(\"chats\").insert([\n                        {\n                            test_session_id: session.id,\n                            chat_number: chatNumber,\n                            messages: []\n                        }\n                    ]).select().single()));\n                // Добавляем восстановленные чаты к существующим\n                const repairedChats = [\n                    ...chats || []\n                ];\n                for (const { data, error } of repairResults){\n                    if (!error && data) {\n                        repairedChats.push(data);\n                        console.log(`✅ Successfully repaired missing chat ${data.chat_number}`);\n                    }\n                }\n                // Используем восстановленные чаты\n                if (repairedChats.length > (chats?.length || 0)) {\n                    console.log(\"✅ Chat repair successful, now have\", repairedChats.length, \"chats\");\n                    return {\n                        ...session,\n                        chats: repairedChats\n                    };\n                }\n            }\n        }\n        console.log(\"✅ All chats created and fetched successfully:\", {\n            sessionId: session.id,\n            employeeId: session.employee_id,\n            chatCount: chats ? chats.length : 0,\n            chatNumbers: chats ? chats.map((c)=>c.chat_number) : []\n        });\n        return {\n            ...session,\n            chats: chats || []\n        };\n    } catch (error) {\n        console.error(\"❌ Error in createTestSession:\", error);\n        throw error;\n    }\n}\nasync function updateTestSession(sessionId, updates) {\n    try {\n        console.log(\"Updating test session:\", {\n            sessionId,\n            updates\n        });\n        const { data, error } = await supabase.from(\"test_sessions\").update({\n            ...updates,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", sessionId).select().single();\n        if (error) {\n            console.error(\"Error updating test session:\", error);\n            throw error;\n        }\n        if (!data) {\n            throw new Error(\"No data returned from test session update\");\n        }\n        console.log(\"Test session updated successfully:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error in updateTestSession:\", error);\n        throw error;\n    }\n}\nasync function completeTestSession(sessionId) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Completing test session:\", {\n            sessionId\n        });\n        // Проверим существование сессии перед обновлением\n        const { data: existingSession, error: checkError } = await supabase.from(\"test_sessions\").select(\"*\").eq(\"id\", sessionId).single();\n        if (checkError) {\n            console.error(\"❌ Error checking session existence:\", checkError);\n            throw new Error(`Failed to find session: ${checkError.message}`);\n        }\n        if (!existingSession) {\n            console.error(\"❌ Session not found:\", sessionId);\n            throw new Error(\"Session not found\");\n        }\n        console.log(\"✓ Found session to complete:\", {\n            id: existingSession.id,\n            completed: existingSession.completed,\n            employee_id: existingSession.employee_id\n        });\n        // Если сессия уже завершена, просто возвращаем её\n        if (existingSession.completed) {\n            console.log(\"ℹ️ Session already completed:\", existingSession);\n            return existingSession;\n        }\n        const { data, error } = await supabase.from(\"test_sessions\").update({\n            end_time: new Date().toISOString(),\n            completed: true,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", sessionId).select().single();\n        if (error) {\n            console.error(\"❌ Error completing test session:\", error);\n            throw error;\n        }\n        if (!data) {\n            console.error(\"❌ No data returned from test session completion\");\n            throw new Error(\"No data returned from test session completion\");\n        }\n        console.log(\"✅ Test session completed successfully:\", data);\n        // Обновление кэша в localStorage для немедленного отражения изменений\n        try {\n            const cacheKey = `test_session_${sessionId}`;\n            localStorage.setItem(cacheKey, JSON.stringify({\n                ...data,\n                cached_at: new Date().toISOString()\n            }));\n            console.log(\"✅ Session cache updated in localStorage\");\n        } catch (cacheError) {\n            console.warn(\"⚠️ Failed to update local cache:\", cacheError);\n        // Игнорируем ошибку кэширования, это некритично\n        }\n        return data;\n    } catch (error) {\n        console.error(\"❌ Error in completeTestSession:\", error);\n        throw error;\n    }\n}\nasync function getRecentTestSessions(limit = 20) {\n    try {\n        console.log(\"\\uD83D\\uDD0D Fetching recent test sessions, limit:\", limit);\n        // Сначала проверим кэш в localStorage\n        try {\n            const cacheKey = \"recent_test_sessions\";\n            const cachedData = localStorage.getItem(cacheKey);\n            if (cachedData) {\n                const { sessions, timestamp } = JSON.parse(cachedData);\n                const cacheAge = Date.now() - new Date(timestamp).getTime();\n                // Если кэш не старше 5 секунд (5000 мс), используем его\n                if (cacheAge < 5000 && Array.isArray(sessions) && sessions.length > 0) {\n                    console.log(\"\\uD83D\\uDCCB Using cached test sessions, age:\", Math.round(cacheAge / 1000), \"seconds\");\n                    return sessions;\n                }\n            }\n        } catch (cacheError) {\n            console.warn(\"⚠️ Cache error:\", cacheError);\n        // Продолжаем без использования кэша\n        }\n        const { data, error } = await supabase.from(\"test_sessions\").select(`\r\n        *,\r\n        employee:employees (\r\n          first_name\r\n        ),\r\n        chats (\r\n          id,\r\n          chat_number,\r\n          messages\r\n        )\r\n      `).order(\"created_at\", {\n            ascending: false\n        }).limit(limit);\n        if (error) {\n            console.error(\"❌ Error fetching recent test sessions:\", error);\n            throw error;\n        }\n        // Проверяем наличие данных\n        if (!data || data.length === 0) {\n            console.warn(\"⚠️ No test sessions found\");\n            return [];\n        }\n        console.log(\"\\uD83D\\uDCCA Raw test sessions:\", data.map((s)=>({\n                id: s.id,\n                employee_id: s.employee_id,\n                completed: s.completed,\n                end_time: s.end_time\n            })));\n        // Проверяем каждую сессию на корректность данных\n        const validSessions = data.filter((session)=>{\n            if (!session.id || !session.employee_id) {\n                console.warn(\"⚠️ Invalid session data:\", session);\n                return false;\n            }\n            return true;\n        });\n        // Группируем сессии по employee_id - для каждого сотрудника берем самую последнюю сессию\n        const latestSessionByEmployee = {};\n        validSessions.forEach((session)=>{\n            const employeeId = session.employee_id;\n            // Проверяем, правильно ли установлен флаг completed\n            // Если есть end_time, но completed = false, корректируем это\n            if (session.end_time && !session.completed) {\n                console.warn(\"⚠️ Session has end_time but completed=false, fixing:\", session.id);\n                session.completed = true;\n            }\n            // Если у нас уже есть сессия для этого сотрудника, берем более новую\n            if (latestSessionByEmployee[employeeId]) {\n                const existingDate = new Date(latestSessionByEmployee[employeeId].created_at).getTime();\n                const currentDate = new Date(session.created_at).getTime();\n                if (currentDate > existingDate) {\n                    latestSessionByEmployee[employeeId] = session;\n                }\n            } else {\n                latestSessionByEmployee[employeeId] = session;\n            }\n        });\n        // Преобразуем объект обратно в массив и сортируем по времени создания (от новых к старым)\n        const uniqueSessions = Object.values(latestSessionByEmployee).sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n        console.log(\"\\uD83D\\uDCCB Filtered sessions:\", uniqueSessions.map((s)=>({\n                id: s.id,\n                employee_id: s.employee_id,\n                completed: s.completed,\n                messages_count: s.chats?.reduce((total, chat)=>total + (chat.messages?.length || 0), 0) || 0\n            })));\n        // Кэшируем результат в localStorage\n        try {\n            const cacheKey = \"recent_test_sessions\";\n            localStorage.setItem(cacheKey, JSON.stringify({\n                sessions: uniqueSessions,\n                timestamp: new Date().toISOString()\n            }));\n            console.log(\"✅ Sessions cached in localStorage\");\n        } catch (cacheError) {\n            console.warn(\"⚠️ Failed to cache sessions:\", cacheError);\n        // Игнорируем ошибку кэширования\n        }\n        return uniqueSessions;\n    } catch (error) {\n        console.error(\"❌ Error in getRecentTestSessions:\", error);\n        throw error;\n    }\n}\nasync function getEmployeeTestSessions(employeeId) {\n    try {\n        const { data, error } = await supabase.from(\"test_sessions\").select(`\r\n        *,\r\n        employee:employees (\r\n          first_name\r\n        ),\r\n        chats (\r\n          id,\r\n          chat_number,\r\n          messages\r\n        )\r\n      `).eq(\"employee_id\", employeeId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching employee test sessions:\", error);\n            throw error;\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error in getEmployeeTestSessions:\", error);\n        throw error;\n    }\n}\nasync function addMessageToTestSession(sessionId, chatNumber, message) {\n    try {\n        console.log(\"Adding message to session:\", {\n            sessionId,\n            chatNumber,\n            message\n        });\n        // Проверка существования сессии перед добавлением сообщения\n        try {\n            const session = await getTestSession(sessionId);\n            console.log(\"Found session for message:\", {\n                sessionId,\n                employeeId: session.employee_id,\n                completed: session.completed\n            });\n        } catch (sessionError) {\n            console.error(\"Session validation error:\", sessionError);\n        // Продолжаем выполнение, так как ошибка может быть только в логировании\n        }\n        // Получаем чат напрямую через single()\n        const { data: chat, error: fetchError } = await supabase.from(\"chats\").select(\"*\").eq(\"test_session_id\", sessionId).eq(\"chat_number\", chatNumber).single();\n        if (fetchError) {\n            console.error(\"Error fetching chat:\", fetchError);\n            throw new Error(`Failed to fetch chat: ${fetchError.message}`);\n        }\n        if (!chat) {\n            console.error(\"Chat not found for session:\", sessionId, \"and number:\", chatNumber);\n            // Дополнительная проверка существования чатов для сессии\n            const { data: existingChats, error: chatsError } = await supabase.from(\"chats\").select(\"id, chat_number\").eq(\"test_session_id\", sessionId);\n            if (chatsError) {\n                console.error(\"Error checking existing chats:\", chatsError);\n            } else {\n                console.log(\"Existing chats for session:\", existingChats);\n            }\n            throw new Error(\"Chat not found\");\n        }\n        console.log(\"Found chat:\", {\n            chatId: chat.id,\n            existingMessages: chat.messages?.length || 0\n        });\n        // Преобразуем существующие сообщения из JSONB\n        const existingMessages = chat.messages || [];\n        const updatedMessages = [\n            ...existingMessages,\n            message\n        ];\n        // Обновляем сообщения в чате\n        const { data: updatedChat, error: updateError } = await supabase.from(\"chats\").update({\n            messages: updatedMessages,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", chat.id).select().single();\n        if (updateError) {\n            console.error(\"Error updating chat:\", updateError);\n            throw updateError;\n        }\n        if (!updatedChat) {\n            throw new Error(\"Failed to update chat\");\n        }\n        console.log(\"Message added successfully:\", {\n            chatId: updatedChat.id,\n            messageCount: updatedChat.messages.length,\n            latestMessage: updatedChat.messages[updatedChat.messages.length - 1]\n        });\n        return updatedChat;\n    } catch (error) {\n        console.error(\"Error in addMessageToTestSession:\", error);\n        throw error;\n    }\n}\n// Новая функция для получения всех чатов тестовой сессии\nasync function getTestSessionChats(sessionId) {\n    try {\n        const { data, error } = await supabase.from(\"chats\").select(\"*\").eq(\"test_session_id\", sessionId).order(\"chat_number\");\n        if (error) {\n            throw error;\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"Error in getTestSessionChats:\", error);\n        throw error;\n    }\n}\nasync function getChatHistory(testSessionId) {\n    try {\n        console.log(\"Fetching chat history for session:\", testSessionId);\n        const { data, error } = await supabase.from(\"chats\").select(\"*\").eq(\"test_session_id\", testSessionId).order(\"chat_number\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"Error fetching chat history:\", error);\n            throw error;\n        }\n        if (!data) {\n            console.log(\"No chat history found\");\n            return [];\n        }\n        console.log(\"Chat history fetched successfully:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error in getChatHistory:\", error);\n        throw error;\n    }\n}\nasync function getTestSession(sessionId) {\n    try {\n        console.log(\"Fetching test session:\", {\n            sessionId\n        });\n        const { data, error } = await supabase.from(\"test_sessions\").select(\"*, employee:employee_id(*)\").eq(\"id\", sessionId).single();\n        if (error) {\n            console.error(\"Error fetching test session:\", error);\n            throw new Error(`Failed to fetch test session: ${error.message}`);\n        }\n        if (!data) {\n            console.error(\"No test session found with ID:\", sessionId);\n            throw new Error(\"Test session not found\");\n        }\n        console.log(\"Test session fetched successfully:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error in getTestSession:\", error);\n        throw error;\n    }\n}\n/**\r\n * Completes all active test sessions for an employee\r\n */ async function completeAllEmployeeTestSessions(employeeId) {\n    try {\n        console.log(\"Completing all active test sessions for employee:\", employeeId);\n        // Получаем все активные сессии для сотрудника\n        const { data: activeSessions, error: fetchError } = await supabase.from(\"test_sessions\").select(\"id\").eq(\"employee_id\", employeeId).eq(\"completed\", false);\n        if (fetchError) {\n            console.error(\"Error fetching active sessions:\", fetchError);\n            throw fetchError;\n        }\n        if (!activeSessions || activeSessions.length === 0) {\n            console.log(\"No active sessions found for employee:\", employeeId);\n            return;\n        }\n        console.log(`Found ${activeSessions.length} active sessions to complete`);\n        // Завершаем каждую сессию\n        const currentTime = new Date().toISOString();\n        const { error: updateError } = await supabase.from(\"test_sessions\").update({\n            end_time: currentTime,\n            completed: true,\n            updated_at: currentTime\n        }).eq(\"employee_id\", employeeId).eq(\"completed\", false);\n        if (updateError) {\n            console.error(\"Error completing sessions:\", updateError);\n            throw updateError;\n        }\n        console.log(`Successfully completed ${activeSessions.length} sessions for employee:`, employeeId);\n    } catch (error) {\n        console.error(\"Error in completeAllEmployeeTestSessions:\", error);\n        throw error;\n    }\n}\n/**\r\n * Сохраняет результаты тестирования в базу данных\r\n */ async function saveTestResult(testResult) {\n    try {\n        console.log(\"Checking for existing test result:\", testResult.test_session_id);\n        // Проверяем, существуют ли уже результаты для этой сессии\n        const { data: existingResults, error: checkError } = await supabase.from(\"test_results\").select(\"id\").eq(\"test_session_id\", testResult.test_session_id).limit(1);\n        if (checkError) {\n            console.error(\"Error checking existing results:\", checkError);\n        // Продолжаем выполнение, даже если произошла ошибка при проверке\n        } else if (existingResults && existingResults.length > 0) {\n            console.log(\"Found existing result, updating instead of creating new:\", existingResults[0].id);\n            // Обновляем существующую запись\n            const { data: updatedData, error: updateError } = await supabase.from(\"test_results\").update({\n                ...testResult,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", existingResults[0].id).select().single();\n            if (updateError) {\n                console.error(\"Error updating test result:\", updateError);\n                throw updateError;\n            }\n            console.log(\"Test result updated successfully:\", updatedData);\n            return updatedData;\n        }\n        // Если результат не найден, создаем новый\n        const { data, error } = await supabase.from(\"test_results\").insert([\n            testResult\n        ]).select().single();\n        if (error) {\n            console.error(\"Error saving test result:\", error);\n            throw error;\n        }\n        console.log(\"New test result saved successfully:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error in saveTestResult:\", error);\n        throw error;\n    }\n}\n/**\r\n * Получает результаты тестирования для сессии\r\n */ async function getTestResultForSession(sessionId) {\n    try {\n        console.log(\"Fetching test result for session:\", sessionId);\n        const { data, error } = await supabase.from(\"test_results\").select(\"*\").eq(\"test_session_id\", sessionId).single();\n        if (error) {\n            if (error.code === \"PGRST116\") {\n                // Результат не найден\n                console.log(\"No test result found for session:\", sessionId);\n                return null;\n            }\n            console.error(\"Error fetching test result:\", error);\n            throw error;\n        }\n        console.log(\"Test result fetched successfully:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"Error in getTestResultForSession:\", error);\n        throw error;\n    }\n}\n/**\r\n * Получает все результаты тестирования для сотрудника\r\n */ async function getTestResultsForEmployee(employeeId) {\n    try {\n        console.log(\"Fetching test results for employee:\", employeeId);\n        const { data, error } = await supabase.from(\"test_results\").select(\"*\").eq(\"employee_id\", employeeId).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) {\n            console.error(\"Error fetching test results:\", error);\n            throw error;\n        }\n        console.log(`Fetched ${data?.length || 0} test results for employee:`, employeeId);\n        return data || [];\n    } catch (error) {\n        console.error(\"Error in getTestResultsForEmployee:\", error);\n        throw error;\n    }\n}\n/**\r\n * Собирает все сообщения из чатов сессии в единый промпт\r\n */ async function generateAnalysisPrompt(sessionId) {\n    try {\n        console.log(\"Generating analysis prompt for session:\", sessionId);\n        // Получаем все чаты для сессии\n        const chats = await getTestSessionChats(sessionId);\n        // Получаем информацию о сессии\n        const session = await getTestSession(sessionId);\n        if (!chats || chats.length === 0) {\n            throw new Error(\"No chats found for session\");\n        }\n        // Формируем заголовок промпта\n        const promptHeader = `Ты — Grok 3, созданный xAI. Я предоставлю тебе текстовый диалог между тестируемой моделью (соискателем на роль администратора моей страницы OnlyFans) и AI-клиентом OnlyFans. Твоя задача — проанализировать диалог и оценить модель по следующим 6 критериям:\r\n\r\nВовлеченность (Engagement): Насколько активно модель поддерживает интерес клиента, отвечает ли вовремя и удерживает ли внимание.\r\nОбаяние и тон (Charm and Tone): Насколько модель дружелюбна, привлекательна и использует ли подходящий тон общения.\r\nКреативность (Creativity): Насколько модель предлагает оригинальные идеи, разнообразит общение и избегает шаблонности.\r\nАдаптивность (Adaptability): Насколько модель гибко подстраивается под настроение и запросы клиента.\r\nУмение продавать себя (Self-Promotion): Насколько эффективно модель подчеркивает свои сильные стороны и вызывает желание продолжить общение.\r\nЦеновая политика (Pricing Policy): Насколько эффективно модель управляет вопросами цены, обосновывает ценность своих услуг и работает с возражениями по цене.\r\n\r\nДля каждого критерия:\r\nВыставь оценку от 0 до 5 (где 0 — минимально, 5 — идеально).\r\nДай подробный вердикт (комментарий), объясняющий оценку, включая сильные стороны и области для улучшения.\r\n\r\nДля критерия \"Ценовая политика\" дополнительно:\r\nПредоставь список сильных сторон (strengths) и областей, требующих улучшения (improvements).\r\n\r\nДополнительно проанализируй эффективность продаж по трем этапам:\r\n1. Знакомство (Introduction): Насколько эффективно модель устанавливает контакт и создает первое впечатление.\r\n2. Прогрев (Warmup): Насколько эффективно модель подогревает интерес и создает предпосылки для продажи.\r\n3. Продажа/Закрытие (Closing): Насколько эффективно модель закрывает сделку и преодолевает возражения.\r\n\r\nДля каждого этапа:\r\nВыставь оценку от 0 до 5 (где 0 — минимально, 5 — идеально).\r\nПредоставь список сильных сторон (strengths) и слабых сторон (weaknesses).\r\n\r\nНжуно сделать результаты более строгими вот наводящие правила чтобы понижать балл\r\n\r\n-тест идёт 20 минут\r\n-нужно при оценке учитывать и обьем сообщений чтоб с каждым собеседником было минимум по 6 сообщений\r\n-каждый диалог должен примерно содержать 3 стадии, иначе оценка низкая:\r\n1)Стадия знакомства знакомиться: 5 -10 сообщений они должны быть в большинстве своем последовательны и не пошлые\r\n2)Cтадия прогрева: по диалогу понятно что модель менее заинтересована чем клиент,модель должна не задавать много вопросов, показывать тизовый контент и намеки через подтекст ненавязчиво\r\n3)Стадия продаж: нужен баланс между пошлым повествованием и перегрузом контентом без водводящих сообщений, сообщения примерно строятся как два наводящих сообщения по покупке контента намекающих на изображения контента чем больше продаж тем лучше\r\n-также нужно учитывать чтоб модель не упрашивала приобрести контент, не выглядела как шлюха, работала на глубину чека и эмоциональную привязанность, высокий бал если клиент оставит чаевые, также учитывать уровень английского и то что она держит контекст всего диалога, сообщения последовательны\r\n\r\nВАЖНО: ВСЕ РЕЗУЛЬТАТЫ АНАЛИЗА ДОЛЖНЫ БЫТЬ ТОЛЬКО НА РУССКОМ ЯЗЫКЕ, ВКЛЮЧАЯ ВСЕ ВЕРДИКТЫ, ЗАКЛЮЧЕНИЯ, СПИСКИ СИЛЬНЫХ И СЛАБЫХ СТОРОН. НЕ ИСПОЛЬЗОВАТЬ АНГЛИЙСКИЙ ЯЗЫК НИ В КАКИХ ЧАСТЯХ ОТВЕТА.\r\n\r\nСТРОГО ОТВЕЧАЙ ТОЛЬКО В JSON ФОРМАТЕ, БЕЗ ДОПОЛНИТЕЛЬНОГО ТЕКСТА ДО ИЛИ ПОСЛЕ JSON.\r\n\r\nПредоставь результат анализа в формате JSON:\r\n\r\n{\r\n  \"dialog_analysis\": {\r\n    \"metrics\": {\r\n      \"engagement\": {\r\n        \"score\": ,\r\n        \"verdict\": \"\"\r\n      },\r\n      \"charm_and_tone\": {\r\n        \"score\": ,\r\n        \"verdict\": \"\"\r\n      },\r\n      \"creativity\": {\r\n        \"score\": ,\r\n        \"verdict\": \"\"\r\n      },\r\n      \"adaptability\": {\r\n        \"score\": ,\r\n        \"verdict\": \"\"\r\n      },\r\n      \"self_promotion\": {\r\n        \"score\": ,\r\n        \"verdict\": \"\"\r\n      },\r\n      \"pricing_policy\": {\r\n        \"score\": ,\r\n        \"verdict\": \"\",\r\n        \"strengths\": [],\r\n        \"improvements\": []\r\n      },\r\n      \"sales_stages\": {\r\n        \"introduction\": {\r\n          \"score\": ,\r\n          \"strengths\": [],\r\n          \"weaknesses\": []\r\n        },\r\n        \"warmup\": {\r\n          \"score\": ,\r\n          \"strengths\": [],\r\n          \"weaknesses\": []\r\n        },\r\n        \"closing\": {\r\n          \"score\": ,\r\n          \"strengths\": [],\r\n          \"weaknesses\": []\r\n        }\r\n      }\r\n    },\r\n    \"overall_conclusion\": \"\",\r\n    \"result_summary\": \"\"\r\n  }\r\n}\r\n\r\n\"result_summary\" - это краткое (до 200 слов) резюме результатов анализа, включающее общую оценку соискателя, его основные сильные стороны и рекомендации по улучшению. Этот текст будет показан пользователю как итоговый вывод анализа.\r\n\r\nВот диалоги для анализа:\r\n`;\n        // Формируем части промпта из каждого чата\n        const chatPrompts = chats.map((chat)=>{\n            const chatNumber = chat.chat_number;\n            let characterType = \"\";\n            switch(chatNumber){\n                case 1:\n                    characterType = \"Страстный клиент (Marcus)\";\n                    break;\n                case 2:\n                    characterType = \"Капризный клиент (Shrek)\";\n                    break;\n                case 3:\n                    characterType = \"Экономный клиент, торгующийся о цене (Oliver)\";\n                    break;\n                case 4:\n                    characterType = \"Провокационный клиент, проверяющий границы (Alex)\";\n                    break;\n                default:\n                    characterType = `Клиент ${chatNumber}`;\n            }\n            const messages = chat.messages || [];\n            if (messages.length === 0) {\n                return `\\n\\n--- Чат ${chatNumber} (${characterType}) ---\\nНет сообщений`;\n            }\n            const formattedMessages = messages.map((msg)=>{\n                const roleLabel = msg.isOwn ? \"Соискатель\" : `AI-клиент (${characterType})`;\n                return `${roleLabel}: ${msg.content}`;\n            }).join(\"\\n\");\n            return `\\n\\n--- Чат ${chatNumber} (${characterType}) ---\\n${formattedMessages}`;\n        }).join(\"\");\n        // Собираем полный промпт\n        const fullPrompt = promptHeader + chatPrompts;\n        console.log(\"Analysis prompt generated successfully, length:\", fullPrompt.length);\n        return fullPrompt;\n    } catch (error) {\n        console.error(\"Error generating analysis prompt:\", error);\n        throw error;\n    }\n}\nasync function saveCandidateForm(userId, formData) {\n    try {\n        console.log(\"Saving candidate form data for user:\", userId, formData);\n        // Получаем ID сотрудника из параметра\n        const employeeId = userId;\n        if (!employeeId) {\n            throw new Error(\"ID сотрудника не найден. Пожалуйста, начните процесс регистрации заново.\");\n        }\n        // Обновляем имя сотрудника в таблице employees\n        if (formData.first_name) {\n            const { error: nameUpdateError } = await supabase.from(\"employees\").update({\n                first_name: formData.first_name\n            }).eq(\"id\", employeeId);\n            if (nameUpdateError) {\n                console.error(\"Error updating employee name:\", nameUpdateError);\n            // Продолжаем процесс даже при ошибке обновления имени\n            }\n        }\n        // Проверяем, существует ли уже анкета для этого сотрудника\n        const { data: existingForm, error: checkError } = await supabase.from(\"candidate_forms\").select(\"id\").eq(\"employee_id\", employeeId).single();\n        if (checkError && checkError.code !== \"PGRST116\") {\n            console.error(\"Error checking existing form:\", checkError);\n        // Продолжаем процесс даже при ошибке\n        }\n        // Подготавливаем данные анкеты\n        const formDataToSave = {\n            telegram_tag: formData.telegram_tag,\n            shift: formData.shift,\n            experience: formData.experience,\n            motivation: formData.motivation,\n            about_me: formData.about_me,\n            updated_at: new Date().toISOString()\n        };\n        let result;\n        // Если анкета уже существует, обновляем её\n        if (existingForm) {\n            console.log(\"Updating existing candidate form:\", existingForm.id);\n            const { data, error } = await supabase.from(\"candidate_forms\").update(formDataToSave).eq(\"id\", existingForm.id).select().single();\n            if (error) {\n                console.error(\"Error updating candidate form:\", error);\n                throw new Error(`Error updating candidate form: ${error.message}`);\n            }\n            result = data;\n        } else {\n            // Иначе создаем новую анкету\n            console.log(\"Creating new candidate form for employee:\", employeeId);\n            // Добавляем employee_id к данным анкеты\n            const newFormData = {\n                ...formDataToSave,\n                employee_id: employeeId\n            };\n            const { data, error } = await supabase.from(\"candidate_forms\").insert([\n                newFormData\n            ]).select().single();\n            if (error) {\n                console.error(\"Error saving candidate form:\", error);\n                throw new Error(`Error saving candidate form: ${error.message}`);\n            }\n            result = data;\n        }\n        console.log(\"Candidate form saved successfully:\", result);\n        // Очищаем sessionStorage после успешного сохранения\n        sessionStorage.removeItem(\"candidateFormData\");\n        // Сохраняем employee_id в возвращаемых данных для последующего использования\n        return {\n            ...result,\n            employee_id: employeeId\n        };\n    } catch (error) {\n        console.error(\"Error in saveCandidateForm:\", error);\n        throw error;\n    }\n}\n// Функция для получения данных анкеты соискателя по id сотрудника\nasync function getCandidateFormByEmployeeId(employeeId) {\n    try {\n        const { data, error } = await supabase.from(\"candidate_forms\").select(\"*\").eq(\"employee_id\", employeeId).single();\n        if (error) {\n            console.error(\"Error fetching candidate form:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Error in getCandidateFormByEmployeeId:\", error);\n        return null;\n    }\n}\nasync function createUser(userData) {\n    try {\n        const { data, error } = await supabase.from(\"users\").insert([\n            {\n                first_name: userData.first_name,\n                email: userData.email,\n                phone: userData.phone\n            }\n        ]).select();\n        if (error) {\n            console.error(\"Error creating user:\", error);\n            throw new Error(\"Failed to create user\");\n        }\n        if (!data || data.length === 0) {\n            throw new Error(\"No data returned from the database\");\n        }\n        return data[0];\n    } catch (error) {\n        console.error(\"Error in createUser:\", error);\n        throw error;\n    }\n}\n/**\r\n * Создает и сохраняет токен для доступа кандидата к форме регистрации\r\n */ async function createCandidateToken(employeeId) {\n    try {\n        console.log(\"Creating candidate token for employee:\", employeeId);\n        // Генерируем уникальный токен\n        const token = Math.random().toString(36).substring(2, 10) + Date.now().toString(36) + Math.random().toString(36).substring(2, 10);\n        // Устанавливаем срок действия токена (7 дней)\n        const expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + 7);\n        // Деактивируем все предыдущие токены для этого сотрудника\n        try {\n            await supabase.from(\"candidate_tokens\").update({\n                is_used: true\n            }).eq(\"employee_id\", employeeId).eq(\"is_used\", false);\n            console.log(\"Deactivated previous tokens for employee:\", employeeId);\n        } catch (deactivateError) {\n            console.warn(\"Error deactivating previous tokens:\", deactivateError);\n        // Продолжаем выполнение даже при ошибке\n        }\n        // Сохраняем новый токен в базе данных\n        const { data, error } = await supabase.from(\"candidate_tokens\").insert([\n            {\n                employee_id: employeeId,\n                token: token,\n                expires_at: expiresAt.toISOString(),\n                is_used: false\n            }\n        ]).select().single();\n        if (error) {\n            console.error(\"Error creating candidate token:\", error);\n            throw new Error(`Failed to create candidate token: ${error.message}`);\n        }\n        if (!data) {\n            throw new Error(\"No data returned from candidate token creation\");\n        }\n        console.log(\"Token created successfully:\", data.token);\n        return data.token;\n    } catch (error) {\n        console.error(\"Error in createCandidateToken:\", error);\n        throw error;\n    }\n}\n/**\r\n * Проверяет валидность токена кандидата и возвращает ID сотрудника\r\n */ async function validateCandidateToken(token) {\n    try {\n        console.log(\"Validating candidate token:\", token);\n        // Получаем токен из базы данных\n        const { data, error } = await supabase.from(\"candidate_tokens\").select(\"id, employee_id, expires_at, is_used\").eq(\"token\", token).single();\n        if (error) {\n            console.error(\"Error validating token:\", error);\n            return null;\n        }\n        // Проверяем, не истек ли срок действия токена\n        const expiresAt = new Date(data.expires_at);\n        const now = new Date();\n        if (expiresAt < now) {\n            console.error(\"Token has expired:\", {\n                token: token,\n                expiresAt: expiresAt.toISOString(),\n                now: now.toISOString()\n            });\n            return null;\n        }\n        // Помечаем токен как использованный\n        const { error: updateError } = await supabase.from(\"candidate_tokens\").update({\n            is_used: true,\n            last_used_at: new Date().toISOString(),\n            ip_address: window.location.hostname,\n            user_agent: navigator.userAgent\n        }).eq(\"id\", data.id);\n        if (updateError) {\n            console.warn(\"Error updating token usage status:\", updateError);\n        // Продолжаем даже если обновление статуса не удалось\n        }\n        console.log(\"Token validated successfully for employee:\", data.employee_id);\n        return data.employee_id;\n    } catch (error) {\n        console.error(\"Exception in validateCandidateToken:\", error);\n        return null;\n    }\n}\nasync function getCandidateForm(employeeId) {\n    try {\n        if (!employeeId) {\n            console.error(\"No employee ID provided for getCandidateForm\");\n            return null;\n        }\n        const { data, error } = await supabase.from(\"candidate_forms\").select(\"*\").eq(\"employee_id\", employeeId).single();\n        if (error) {\n            console.error(\"Error fetching candidate form:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"Exception in getCandidateForm:\", error);\n        return null;\n    }\n}\n// Функция для обновления статуса чата (печатание, прочитано и т.д.)\nasync function updateChatStatus(sessionId, chatNumber, status) {\n    try {\n        const session = await getTestSession(sessionId);\n        if (!session) {\n            throw new Error(\"Сессия не найдена\");\n        }\n        if (session.completed) {\n            throw new Error(\"Невозможно обновить статус для завершенной сессии\");\n        }\n        // В зависимости от реализации базы данных, здесь нужно будет обновить статус чата\n        // Например, можно использовать таблицу chat_status или добавить метаданные к сессии\n        // Пример реализации (нужно адаптировать под вашу структуру данных)\n        const { data, error } = await supabase.from(\"test_sessions\").update({\n            [`chat_${chatNumber}_status`]: status\n        }).eq(\"id\", sessionId).select();\n        if (error) {\n            throw error;\n        }\n        return data?.[0] || null;\n    } catch (error) {\n        console.error(\"Error updating chat status:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftest-sessions%2Froute&page=%2Fapi%2Ftest-sessions%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftest-sessions%2Froute.ts&appDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdministrator%5CDocuments%5CGitHub%5Conlyfans_last_chance%5Conlyfans&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();